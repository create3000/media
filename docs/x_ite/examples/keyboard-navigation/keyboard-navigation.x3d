<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "https://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='EnvironmentalSensor' level='3'/>
    <component name='KeyDeviceSensor' level='2'/>
    <component name='Scripting' level='1'/>
    <meta name='created' content='Fri, 15 Aug 2025 11:19:50 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.8.26, https://create3000.github.io/sunrize/'/>
    <meta name='modified' content='Wed, 20 Aug 2025 11:00:53 GMT'/>
  </head>
  <Scene>
    <WorldInfo
        title='Keyboard Navigation'
        info='"Use arrow keys or mouse to navigate."'/>
    <DirectionalLight
        direction='-1 -1 -1'/>
    <Viewpoint DEF='VP1'
        description='Initial View'
        position='9.092332 1.599999 5.982846'
        orientation='-0.15218314806622 0.983933582396055 0.0933541369084469 1.11496701957243'>
      <NavigationInfo containerField='navigationInfo'
          type='"WALK"'
          headlight='false'
          transitionType='"TELEPORT"'/>
    </Viewpoint>
    <ProximitySensor DEF='Proxy'
        size='-1 -1 -1'/>
    <Transform DEF='Floor'
        translation='-0 -1 0'
        scale='50 1 50'>
      <Shape>
        <Appearance>
          <Material
              diffuseColor='1 1 1'>
            <ImageTexture containerField='diffuseTexture'
                url='"pattern.jpg"'/>
          </Material>
        </Appearance>
        <Box/>
      </Shape>
    </Transform>
    <KeySensor DEF='Keys'/>
    <TimeSensor DEF='Timer'
        enabled='false'
        loop='true'/>
    <Script DEF='NavigationScript'
        directOutput='true'>
      <field accessType='inputOnly' type='SFBool' name='set_active'/>
      <field accessType='inputOnly' type='SFTime' name='set_time'/>
      <field accessType='inputOutput' type='SFInt32' name='actionKey' value='17'/>
      <field accessType='inputOutput' type='SFFloat' name='speed' value='2'/>
      <field accessType='initializeOnly' type='SFNode' name='viewpoint'>
        <Viewpoint USE='VP1'/>
      </field>
      <field accessType='initializeOnly' type='SFNode' name='proxy'>
        <ProximitySensor USE='Proxy'/>
      </field>
<![CDATA[ecmascript:

let lastTime = -1;

function initialize ()
{
   viewpoint .position    = new SFVec3f (0, 1.6, 0);
   viewpoint .orientation = new SFRotation (-1, 0, 0, 0.2);
}

function set_active (value, time)
{
   if (!value)
      return;

   lastTime = time;

   // Rebind viewpoint to reset any user-offsets and assign values from 
   // ProximitySensor which include user-offsets + viewpoint position/orientation.
   viewpoint .set_bind    = true;
   viewpoint .position    = proxy .position_changed;
   viewpoint .orientation = proxy .orientation_changed;
}

function set_time (value, time)
{
   const dt = time - lastTime;

   switch (actionKey)
   {
      case 17: // up
      {
         const translation = proxy .orientation_changed  
            .multVec (new SFVec3f (0, 0, speed * -dt)) // rotate vector; returns a vector
            .multVec (new SFVec3f (1, 0, 1));          // set y-axis to 0 

         // Compare with first value of NavigationInfo.avatarSize (collision radius).
         const collisionRadius = viewpoint .navigationInfo .avatarSize [0];

         // Check if anything is within collission radius.
         if (Browser .checkDistance (translation) < collisionRadius)
            break;

         viewpoint .position = viewpoint .position .add (translation); 
         break;
      }
      case 18: // down
      {
         const translation = proxy .orientation_changed
            .multVec (new SFVec3f (0, 0, speed * dt)) // rotate vector; returns a vector
            .multVec (new SFVec3f (1, 0, 1));         // set y-axis to 0

         // Compare with first value of NavigationInfo.avatarSize (collision radius).
         const collisionRadius = viewpoint .navigationInfo .avatarSize [0];

         // Check if anything is within collission radius.
         if (Browser .checkDistance (translation) < collisionRadius)
            break;

         viewpoint .position = viewpoint .position .add (translation);
         break;
      }
      case 19: // left
      {
         const rotation = new SFRotation (0, 1, 0, dt);

         viewpoint .orientation = viewpoint .orientation .multiply (rotation);
         break;
      }
      case 20: // right
      {
         const rotation = new SFRotation (0, 1, 0, -dt);

         viewpoint .orientation = viewpoint .orientation .multiply (rotation);
         break;
      }
   }

   lastTime = time;
}
]]>
    </Script>
    <Collision DEF='CollisionBoxes'>
      <Transform DEF='Box_1'
          translation='-20 5 -20'
          scale='10 5 10'>
        <Shape DEF='_1'
            bboxDisplay='true'>
          <Appearance>
            <UnlitMaterial
                emissiveColor='0.3803922 0.8078431 0.1960784'
                transparency='0.5'/>
          </Appearance>
          <Box/>
        </Shape>
      </Transform>
      <Transform DEF='Box'
          translation='20 5 20'
          scale='10 5 10'>
        <Shape USE='_1'/>
      </Transform>
      <Script DEF='CollisionScript'>
        <field accessType='inputOnly' type='SFBool' name='set_active'/>
<![CDATA[ecmascript:

function set_active (value, time)
{
   print (`Collision active: ${value}`);
}
]]>
      </Script>
    </Collision>
    <Group DEF='StepUpBoxes'>
      <Transform DEF='Box_2'
          translation='20 0.25 -20'
          scale='10 0.25 10'>
        <Shape USE='_1'/>
      </Transform>
      <Transform DEF='Box_3'
          translation='-20 0.25 20'
          scale='10 0.25 10'>
        <Shape USE='_1'/>
      </Transform>
    </Group>
    <ROUTE fromNode='Keys' fromField='actionKeyPress' toNode='NavigationScript' toField='set_actionKey'/>
    <ROUTE fromNode='Keys' fromField='isActive' toNode='Timer' toField='set_enabled'/>
    <ROUTE fromNode='Timer' fromField='time' toNode='NavigationScript' toField='set_time'/>
    <ROUTE fromNode='Timer' fromField='isActive' toNode='NavigationScript' toField='set_active'/>
    <ROUTE fromNode='CollisionBoxes' fromField='isActive' toNode='CollisionScript' toField='set_active'/>
  </Scene>
</X3D>
