#X3D V4.0 utf8 X_ITE V8.12.5

PROFILE Interchange

COMPONENT CADGeometry : 2
COMPONENT EnvironmentalSensor : 3
COMPONENT Geometry2D : 2
COMPONENT PointingDeviceSensor : 1
COMPONENT Scripting : 1
COMPONENT Shaders : 1
COMPONENT Texturing3D : 2

META "comment" "Rise and Shine"
META "created" "Sun, 27 Oct 2019 05:58:52 GMT"
META "creator" "Holger Seelig"
META "generator" "x3d-tidy V1.0.97, https://www.npmjs.com/package/x3d-tidy"
META "identifier" "file:///Users/holger/Desktop/X_ITE/media/docs/examples/Texturing3D/ImageTexture3D/ImageTexture3D.O.x3d"
META "modified" "Tue, 10 Oct 2023 17:33:55 GMT"

PROTO Volume [
  inputOutput SFVec3f dimensions 1 1 1
  inputOutput SFNode  voxels NULL
]
{
  Group {
    children [
      DEF _1 ProximitySensor {
        size -1 -1 -1
      }
      DEF _2 Transform {
        children Shape {
          appearance Appearance {
            texture IS voxels
            textureTransform DEF _3 TextureTransform3D {
              translation 0.5 0.5 0.5
              center -0.5 -0.5 -0.5
            }
            shaders DEF ComposedShader ComposedShader {
              language "GLSL"
              parts [
                DEF VertexShader ShaderPart {
                  url "data:x-shader/x-vertex,#version 300 es

precision mediump float;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat4 x3d_TextureTransformMatrix [1];

in vec4 x3d_Vertex;
in vec4 x3d_TexCoord0;

out vec3 vertex;
out vec4 texCoord;

void
main ()
{
	vec4 position = x3d_ModelViewMatrix * x3d_Vertex;

	vertex   = position .xyz;
	texCoord = x3d_TextureTransformMatrix [0] * x3d_TexCoord0;

	gl_Position = x3d_ProjectionMatrix * position;
}"
                }
                DEF FragmentShader ShaderPart {
                  type "FRAGMENT"
                  url "data:x-shader/x-fragment,#version 300 es

precision mediump float;
precision mediump sampler3D;

uniform sampler3D x3d_Texture3D [1];
uniform vec4 x3d_ClipPlane [1];

in vec3 vertex;
in vec4 texCoord;

out vec4 x3d_FragColor;

#define NUM_CLIP_PLANES 1

void
clip ()
{
	for (int i = 0; i < NUM_CLIP_PLANES; ++ i)
	{
		if (dot (vertex, x3d_ClipPlane [i] .xyz) - x3d_ClipPlane [i] .w < 0.0)
			discard;
	}
}

vec4
getTextureColor (in vec3 texCoord)
{
	if (texCoord .s < 0.0 || texCoord .s > 1.0)
		discard;

	if (texCoord .t < 0.0 || texCoord .t > 1.0)
		discard;

	if (texCoord .p < 0.0 || texCoord .p > 1.0)
		discard;

	vec4 voxelColor = texture (x3d_Texture3D [0], texCoord);

	return voxelColor;
}

void
main ()
{
	clip ();

	x3d_FragColor = getTextureColor (texCoord .stp / texCoord .q);
}"
                }
              ]
            }
          }
          geometry DEF _4 QuadSet {
            texCoord TextureCoordinate3D { }
            coord Coordinate { }
          }
        }
      }
    ]
  }

  DEF VolumeScript Script {
    inputOutput    SFVec3f dimensions IS dimensions
    initializeOnly SFNode  textureTransform USE _3
    initializeOnly SFNode  geometry USE _4

    url "vrmlscript:

var NUM_PLANES = 200;

function initialize ()
{
	set_dimension ();
}

function set_dimension ()
{
	var
		size     = dimensions .length (),
		size1_2  = size / 2,
		coord    = geometry .coord,
		texCoord = geometry .texCoord;

	coord .point .length = 0;

	for (var i = 0; i < NUM_PLANES; ++ i)
	{
		var z = i / (NUM_PLANES - 1) - 0.5;

		coord .point .push (new SFVec3f ( size1_2,  size1_2, size * z),
		                    new SFVec3f (-size1_2,  size1_2, size * z),
		                    new SFVec3f (-size1_2, -size1_2, size * z),
		                    new SFVec3f ( size1_2, -size1_2, size * z));
	}

	texCoord .point = coord .point;

	textureTransform .scale = new SFVec3f (1 / dimensions .x, 1 / dimensions .y, 1 / dimensions .z);
}
"
  }

  ROUTE _1.orientation_changed TO _2.set_rotation
  ROUTE _1.orientation_changed TO _3.set_rotation
}

WorldInfo {
  title "DCM1"
}

DEF Gray Background {
  skyColor 0.2 0.2 0.2
}

Viewpoint {
  description "Scan"
  position 0.781256 0.7843533 1.579175
  orientation -0.66443355304581 0.731018866357883 0.155368821247235 0.619183687649953
  centerOfRotation 9.128939e-9 1.328216e-8 2.662298e-8
}

DEF Volume_1 Transform {
  children [
    DEF Volume Volume {
      voxels DEF _1 ImageTexture3D {
        url "datasets/dicom/IM00001.implicit_little_endian.dcm"
      }
    }
    DEF _2 ClipPlane {
      plane 0 0 -1 0.643118
    }
  ]
}

DEF VisibleClipPlane Transform {
  children [
    DEF PlaneSensor PlaneSensor {
      axisRotation 0 1 0 1.5708
      offset 2.33535e-6 0 0.643118
      maxPosition -1 0
    }
    DEF Rectangle2D Transform {
      translation 2.33535e-6 0 0.643118
      scale 0.5 0.5 1
      children [
        Shape {
          appearance Appearance {
            lineProperties DEF _3 LineProperties {
              linewidthScaleFactor 2
            }
            material Material {
              transparency 1
            }
          }
          geometry Rectangle2D { }
        }
        Shape {
          appearance Appearance {
            lineProperties USE _3
            material Material { }
          }
          geometry IndexedLineSet {
            coordIndex [ 0, 1, 2, 3, 0 ]
            coord Coordinate {
              point [ -1 -1 0, 1 -1 0, 1 1 0, -1 1 0 ]
            }
          }
        }
      ]
    }
    DEF ClipPlaneScript Script {
      inputOnly  SFVec3f set_translation
      outputOnly SFVec4f plane_changed

      url "vrmlscript:
function set_translation (value)
{
	var distanceFromOrigin = new SFVec3f (0, 0, -1) .dot (value);

	plane_changed = new SFVec4f (0,0,-1, -distanceFromOrigin);
}
"
    }
  ]
}

ROUTE ClipPlaneScript.plane_changed TO _2.set_plane
ROUTE PlaneSensor.translation_changed TO Rectangle2D.set_translation
ROUTE PlaneSensor.translation_changed TO ClipPlaneScript.set_translation
