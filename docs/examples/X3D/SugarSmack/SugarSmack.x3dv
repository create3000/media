#X3D V4.0 utf8 X_ITE V8.4.1

PROFILE Interchange

COMPONENT EnvironmentalSensor : 3
COMPONENT EventUtilities : 1
COMPONENT Geometry2D : 2
COMPONENT Layering : 1
COMPONENT PointingDeviceSensor : 1
COMPONENT Scripting : 1
COMPONENT Sound : 3
COMPONENT Text : 1

UNIT angle degree 0.017453292519943295

META "comment" "World of Titania"
META "created" "Wed, 27 Sep 2017 11:50:59 GMT"
META "creator" "Holger Seelig"
META "generator" "x3d-tidy V1.0.6, https://github.com/create3000/x3d-tidy#readme"
META "identifier" "file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/X3D/SugarSmack/SugarSmack.O.x3d"
META "modified" "Wed, 27 Mar 2019 07:59:33 GMT"
META "titania-add-metadata" "true"

EXTERNPROTO MFInt32 [
  inputOnly   SFTime  set_triggerTime
  inputOutput MFInt32 keyValue
  outputOnly  MFInt32 value_changed
]
"MFInt32.x3d#MFInt32"

PROTO Maze [
  inputOnly   SFTime  set_triggerTime
  inputOutput SFInt32 width 11
  inputOutput SFInt32 height 11
  inputOutput SFFloat complexity 0.75
  inputOutput SFFloat density 0.75
  outputOnly  MFInt32 matrix
  outputOnly  SFTime  generatedTime
]
{
  DEF MazeScript Script {
    inputOnly   SFTime  set_triggerTime IS set_triggerTime
    inputOutput SFInt32 width IS width
    inputOutput SFInt32 height IS height
    inputOutput SFFloat complexity IS complexity
    inputOutput SFFloat density IS density
    inputOutput MFInt32 matrix IS matrix
    outputOnly  SFTime  generatedTime IS generatedTime

    url "ecmascript:

function set_triggerTime (value, time)
{
	generateMaze (complexity, density);

	generatedTime = time;
}

function generateMaze (complexity, density)
{
   // Only odd shapes

	if (width  % 2 == 0) ++ width;
	if (height % 2 == 0) ++ height;

	// Adjust complexity and density relative to maze size

	complexity = Math .floor (complexity * 5 * (width + height));
	density    = Math .floor (density * Math .floor (width / 2) * Math .floor (height / 2));

	// Build actual maze

	matrix .length = width * height;

	for (var i = 0; i < matrix .length; ++ i)
		matrix [i] = 0;

	// Fill borders

	for (var x = 0; x < width; ++ x)
	{
		matrix [getIndex (x, 0)]          = 1;
		matrix [getIndex (x, height - 1)] = 1;
	}

	for (var y = 0; y < height; ++ y)
	{
		matrix [getIndex (0, y)]         = 1;
		matrix [getIndex (width - 1, y)] = 1;
	}
	
	// Make aisles

	for (var i = 0; i < density; ++ i)
	{
		var
			x = Math .round (random (0, Math .floor (width  / 2))) * 2,
			y = Math .round (random (0, Math .floor (height / 2))) * 2;

		matrix [getIndex (x, y)] = 1;

		for (var j = 0; j < complexity; ++ j)
		{
			var neighbours = [ ];

			if (x > 1)          neighbours .push ([x - 2, y]);
			if (x < width - 2)  neighbours .push ([x + 2, y]);
			if (y > 1)          neighbours .push ([x, y - 2]);
			if (y < height - 2) neighbours .push ([x, y + 2]);
			
			if (neighbours .length)
			{
				var neighbour = neighbours [Math .round (random (0, neighbours .length - 1))];
				
				var
					x_ = neighbour [0],
					y_ = neighbour [1];
				
				if (matrix [getIndex (x_, y_)] == 0)
				{
					matrix [getIndex (x_, y_)] = 1;
					matrix [getIndex (x_ + Math .floor ((x - x_) / 2), y_ + Math .floor ((y - y_) / 2))] = 1;
					
					x = x_;
					y = y_;
				}
			}
		}
	}
}

function getIndex (x, y)
{
	return width * y + x;
}

function random (min, max)
{
	return Math .random () * (max - min) + min;
}
"
    directOutput TRUE
  }
}

PROTO MazeGeometry [
  inputOutput MFInt32  type 1
  inputOutput SFBool   rotate TRUE
  inputOutput SFVec3f  mazeElementSize 2 2 2
  inputOutput MFString mazeElementUrl [ ]
  inputOutput SFNode   maze NULL
]
{
  DEF _1 Inline {
    global TRUE
    url IS mazeElementUrl
  }

  DEF _2 LoadSensor {
    children USE _1
  }

  DEF MazeGeometryScript Script {
    inputOnly      SFTime  set_loadTime
    inputOnly      SFTime  set_triggerTime
    inputOutput    MFInt32 type IS type
    inputOutput    SFBool  rotate IS rotate
    inputOutput    SFVec3f mazeElementSize IS mazeElementSize
    initializeOnly SFNode  inlineNode USE _1
    inputOutput    SFNode  maze IS maze
    initializeOnly SFNode  elementProxy NULL
    initializeOnly SFNode  elementShape NULL
    initializeOnly SFNode  proxy Shape {
      geometry IndexedFaceSet {
        coord Coordinate { }
      }
    }
    initializeOnly SFNode  shape Shape {
      appearance Appearance {
        material Material {
          ambientIntensity 0.553957
          specularColor 0.922 0.922 0.922
          shininess 0.923547
        }
      }
      geometry IndexedFaceSet {
        coord Coordinate { }
      }
    }
    initializeOnly SFNode  self USE MazeGeometryScript

    url "ecmascript:
	
var route;

function initialize ()
{
	set_maze (maze, 0);
}

function set_loadTime ()
{
	var collisionNode = Browser .currentScene .getImportedNode (\"MazeElement\");
	
	if (elementProxy || elementShape)
		return;
	
	elementProxy = collisionNode .proxy;
	elementShape = collisionNode .children [0];
	
	collisionNode .proxy        = proxy;
	collisionNode .children [0] = shape;
}

function set_maze (value, time)
{
	if (route)
		Browser .currentScene .deleteRoute (route);

	if (maze)
		route = Browser .currentScene .addRoute (maze, \"generatedTime\", self, \"set_triggerTime\");
}

function set_triggerTime (value, time)
{
	if (maze .matrix .length == 0)
		return;

	generateGeometry (elementProxy, proxy);
	generateGeometry (elementShape, shape);
}

function generateGeometry (elementShape, shape)
{
	var
		elementWidth    = mazeElementSize .x,
		elementDepth    = mazeElementSize .z,
		elementGeometry = elementShape .geometry,
		elementCoord    = elementGeometry .coord,
		geometry        = shape .geometry,
		coord           = geometry .coord,
		offset          = new SFVec3f ((maze .width - 1) * elementWidth / 2, 0, (maze .height - 1) * elementDepth / 2);

	shape .appearance = elementShape .appearance;

	geometry .solid           = elementGeometry .solid;
	geometry .ccw             = elementGeometry .ccw;
	geometry .convex          = elementGeometry .convex;
	geometry .creaseAngle     = elementGeometry .creaseAngle;
	geometry .colorPerVertex  = elementGeometry .colorPerVertex;
	geometry .normalPerVertex = elementGeometry .normalPerVertex;
	geometry .color           = elementGeometry .color;

	var
		colorIndex = new MFInt32 (),
		coordIndex = new MFInt32 ();

	coord .point .length = 0;

	for (var y = 0; y < maze .height; ++ y)
	{
		for (var x = 0; x < maze .width; ++ x)
		{
			if (isType (maze .matrix [getIndex (x, y)]))
			{
				var rotations = rotate ? getRotations (x, y) : [ false ];

				for (var r = 0; r < rotations .length; ++ r)
				{
					var rotation = rotations [r];
				
					for (var i = 0, length = elementGeometry .colorIndex .length; i < length; ++ i)
						colorIndex .push (elementGeometry .colorIndex [i]);
				
					var numPoints = coord .point .length;
				
					for (var i = 0, length = elementGeometry .coordIndex .length; i < length; ++ i)
					{
						var index = elementGeometry .coordIndex [i];
					
						if (index < 0)
							coordIndex .push (-1);
						else
							coordIndex .push (numPoints + index);
					}

					for (var i = 0, length = elementCoord .point .length; i < length; ++ i)
					{
						var point = elementCoord .point [i];
					
						if (rotate)
							point = rotation .multVec (point);

						point = point .add (new SFVec3f (x * elementWidth, 0, y * elementDepth));
						point = point .subtract (offset);

						coord .point .push (point);
					}
				}
			}
		}
	}
	
	geometry .colorIndex = colorIndex;
	geometry .coordIndex = coordIndex;
}

function isType (value)
{
	for (var i = 0; i < type .length; ++ i)
	{
		if (type [i] == value)
			return true;
	}

	return false;
}

function getRotations (x, y)
{
	var
		rotations  = [ ],
		horizontal = false,
		vertical   = false;

	if (x > 0)                horizontal |= maze .matrix [getIndex (x - 1, y)];
	if (x < maze .width - 1)  horizontal |= maze .matrix [getIndex (x + 1, y)];
	if (y > 0)                vertical   |= maze .matrix [getIndex (x, y - 1)];
	if (y < maze .height - 1) vertical   |= maze .matrix [getIndex (x, y + 1)];

	if (! (horizontal || vertical))
	{
		horizontal = true;
		vertical   = true;
	}

	if (horizontal)
		rotations .push (new SFRotation (0, 1, 0, Math .PI / 2));

	if (vertical)
		rotations .push (new SFRotation (0, 0, 1, 0));

	return rotations;
}

function getIndex (x, y)
{
	return maze .width * y + x;
}
"
    directOutput TRUE
  }

  IMPORT _1.MazeElement

  ROUTE _2.loadTime TO MazeGeometryScript.set_loadTime
}

PROTO Globe [
  inputOutput SFBool     enabled FALSE
  inputOnly   SFTime     set_turnTime
  inputOutput SFTime     cycleInterval 0
  inputOutput SFFloat    radius 1
  inputOutput SFVec3f    mazeElementSize 2 2 2
  inputOutput SFTime     startTime 0
  inputOutput SFTime     stopTime 0
  outputOnly  SFTime     cycleTime
  outputOnly  SFInt32    direction_changed
  outputOnly  MFInt32    position_changed
  outputOnly  SFVec3f    translation_changed
  outputOnly  SFRotation rotation_changed
  inputOutput SFNode     maze NULL
  inputOutput MFNode     translationChildren [ ]
  inputOutput MFNode     children [ ]
]
{
  DEF Shape Collision {
    enabled FALSE
    children [
      DEF _3 Transform {
        translation IS translation_changed
        translation -8 2 4
        rotation IS rotation_changed
        rotation -0.284180511188001 -0.790532371841786 0.542494245251621 185.949206667814
        children IS children
      }
      Group {
        children IS translationChildren
      }
    ]
  }

  DEF GlobeScript Script {
    inputOutput    SFTime  cycleInterval IS cycleInterval
    inputOnly      SFTime  set_triggerTime
    inputOnly      SFTime  set_turnTime IS set_turnTime
    inputOnly      SFTime  set_cycleTime
    inputOutput    SFFloat radius IS radius
    inputOutput    SFVec3f mazeElementSize IS mazeElementSize
    outputOnly     SFInt32 direction_changed IS direction_changed
    outputOnly     MFInt32 position_changed IS position_changed
    inputOutput    SFNode  maze IS maze
    initializeOnly SFNode  transform USE _3
    initializeOnly SFNode  timeSensor DEF _4 TimeSensor {
      enabled IS enabled
      cycleInterval 0
      loop TRUE
      startTime IS startTime
      stopTime IS stopTime
      cycleTime IS cycleTime
    }
    initializeOnly SFNode  positionInterpolator DEF _5 PositionInterpolator {
      key [ 0, 1 ]
      keyValue [ -8 2 4, -4 2 4 ]
    }
    initializeOnly SFNode  orientationInterpolator DEF _6 OrientationInterpolator {
      key [ 0, 0.25, 0.5, 0.75, 1 ]
      keyValue [ -0.284180511188001 -0.790532371841786 0.542494245251621 185.949206667814, 0.471950584965486 0.697161480359967 -0.539655923392892 189.608794592081, 0.64245736891161 0.569991777568564 -0.512208846697712 204.736550266607, 0.790426756107843 0.407195559520415 -0.457621371371233 218.697477248719, 0.904626025961796 0.207714310453148 -0.372164638816668 230.661122157893 ]
    }
    initializeOnly SFNode  self USE GlobeScript

    url "ecmascript:

var
	ANY   = -1,
	WEST  = 0,
	EAST  = 1,
	SOUTH = 2,
	NORTH = 3;

var route;

var opposites = [	1, 0, 3, 2 ];

var
	turnTime     = 0,
	turnInterval = 0;

function initialize ()
{
	set_maze (maze, 0);
}

function set_maze (value, time)
{
	if (route)
		Browser .currentScene .deleteRoute (route);

	if (maze)
	{
		route = Browser .currentScene .addRoute (maze, \"generatedTime\", self, \"set_triggerTime\");
	
		set_triggerTime (time, time);	
	}
}

function set_triggerTime (value, time)
{
	if (maze .matrix .length == 0)
		return;

	var x, y;

	do
	{
		x = Math .floor (Math .random () * maze .width);
		y = Math .floor (Math .random () * maze .height);
	}
	while (maze .matrix [getIndex (x, y)] != 0);

	direction_changed        = ANY;
	position_changed [0]     = x;
	position_changed [1]     = y;
	position_changed [2]     = x;
	position_changed [3]     = y;

	transform .translation = getTranslation (x ,y);
	transform .rotation    = new SFRotation ();
						
	timeSensor .cycleInterval         = cycleInterval;
	positionInterpolator    .key      = new MFFloat (0, 1);
	orientationInterpolator .key      = new MFFloat (0, 1);
	positionInterpolator    .keyValue = new MFVec3f (transform .translation, transform .translation);
	orientationInterpolator .keyValue = new MFRotation (transform .rotation, transform .rotation);
}

function set_turnTime (value, time)
{
	if (! maze)
		return;

	if (maze .matrix .length == 0)
		return;

	if (time - turnTime < turnInterval)
		return;

	turnTime = time;

	var
		x  = position_changed [0],
		y  = position_changed [1],
		fc = timeSensor .fraction_changed * cycleInterval;
	
	direction_changed = opposites [direction_changed];

	position_changed [0] = position_changed [2];
	position_changed [1] = position_changed [3];
	position_changed [2] = x;
	position_changed [3] = y;

	if (timeSensor .fraction_changed >= 1)
		timeSensor .cycleInterval = cycleInterval;
	else
		timeSensor .cycleInterval = fc / (cycleInterval - fc) * cycleInterval;
	
	mirrorInterpolator (timeSensor .fraction_changed, positionInterpolator);
	mirrorInterpolator (timeSensor .fraction_changed, orientationInterpolator);

	turnInterval = timeSensor .cycleInterval * (1 - timeSensor .fraction_changed);
}

function mirrorInterpolator (f, interpolator)
{
	for (var i = 0; i < interpolator .key .length; ++ i)
	{
		if (interpolator .key [i] >= f)
			break;
	}
	
	var k = i + 1;
	
	interpolator .key [i]      = f;
	interpolator .keyValue [i] = interpolator .value_changed;

	if (i)
	{	
		for (-- i; i >= 0; -- i, ++ k)
		{
			interpolator .key [k]      = f + (1 - interpolator .key [i] / f) * (1 - f);
			interpolator .keyValue [k] = interpolator .keyValue [i];
		}
	}

	interpolator .key      .length = k;
	interpolator .keyValue .length = k;
}

function set_cycleTime (value, time)
{
	if (! maze)
		return;

	if (maze .matrix .length == 0)
		return;

	// Determine new position.

	var positions = getPositions (position_changed [2], position_changed [3], direction_changed);
		
	if (positions .length == 0)
		positions = getPositions (position_changed [2], position_changed [3], ANY);
	
	var index = Math .floor (Math .random () * positions .length);

	direction_changed = positions [index] [2];

	position_changed [0] = position_changed [2];
	position_changed [1] = position_changed [3];
	position_changed [2] = positions [index] [0];
	position_changed [3] = positions [index] [1];

	// Setup interpolators.

	var
		startTranslation = positionInterpolator .value_changed,
		stopTranslation  = getTranslation (position_changed [2], position_changed [3]),
		startRotation    = orientationInterpolator .value_changed,
		rotations        = getRotations (startTranslation, stopTranslation);

	timeSensor .cycleInterval = cycleInterval;

	positionInterpolator .key [0]     = 0;
	positionInterpolator .key [1]     = 1;
	positionInterpolator .key .length = 2;

	positionInterpolator .keyValue [0]     = startTranslation;
	positionInterpolator .keyValue [1]     = stopTranslation;
	positionInterpolator .keyValue .length = 2;

	for (var i = 0; i < rotations .length; ++ i)
	{
		orientationInterpolator .key [i]      = i / (rotations .length - 1);
		orientationInterpolator .keyValue [i] = startRotation .multiply (rotations [i]);
	}

	orientationInterpolator .key      .length = rotations .length;
	orientationInterpolator .keyValue .length = rotations .length;
}

function getTranslation (x ,y)
{
	var offset = new SFVec3f ((maze .width - 1) * mazeElementSize .x / 2,
	                          0,
	                          (maze .height - 1) * mazeElementSize .z / 2);

	var translation = new SFVec3f (x * mazeElementSize .x, radius, y * mazeElementSize .z);

	return translation .subtract (offset);
}

function getRotations (startTranslation, stopTranslation)
{
	var
		rotations   = new MFRotation (),
		direction   = stopTranslation .subtract (startTranslation),
		axis        = direction .cross (new SFVec3f (0, 1, 0)),
		length      = direction .length (),
		revolutions = length / (2 * Math .PI * radius),
		numKeys     = Math .ceil (revolutions) * 4;

	for (var i = 0; i <= numKeys; ++ i)
		rotations .push (new SFRotation (axis, -i / numKeys * revolutions * 2 * Math .PI));

	return rotations;
}

function getPositions (x, y, direction)
{
	var positions = [ ];

	if (direction != EAST)
		if (x > 0)
			if (maze .matrix [getIndex (x - 1, y)] == 0)
				positions .push ([x - 1, y, WEST]);

	if (direction != WEST)
		if (x < maze .width - 1)
			if (maze .matrix [getIndex (x + 1, y)] == 0)
				positions .push ([x + 1, y, EAST]);

	if (direction != NORTH)
		if (y > 0)
			if (maze .matrix [getIndex (x, y - 1)] == 0)
				positions .push ([x, y - 1, SOUTH]);

	if (direction != SOUTH)
		if (y < maze .height - 1)
			if (maze .matrix [getIndex (x, y + 1)] == 0)
				positions .push ([x, y + 1, NORTH]);

	return positions;
}

function getIndex (x, y)
{
	return maze .width * y + x;
}
"
    directOutput TRUE
  }

  ROUTE _4.fraction_changed TO _6.set_fraction
  ROUTE _4.fraction_changed TO _5.set_fraction
  ROUTE _4.cycleTime TO GlobeScript.set_cycleTime
  ROUTE _6.value_changed TO _3.set_rotation
  ROUTE _5.value_changed TO _3.set_translation
}

PROTO MazeCollisionManager [
  inputOutput MFNode collidables [ ]
]
{
  DEF MazeCollisionManagerScript Script {
    inputOnly      MFInt32 set_position
    inputOnly      SFVec3f set_translation
    inputOutput    MFNode  collidables IS collidables
    initializeOnly SFNode  self USE MazeCollisionManagerScript

    url "ecmascript:

var
	routes      = [ ],
	connections = [ ],
	map         = { };

function initialize ()
{
	set_collidables (collidables, 0);
}

function set_position (value, time)
{
	var currentScene = Browser .currentScene;

	for (var i = 0; i < connections .length; ++ i)
	{
		currentScene .deleteRoute (connections [i]);
	}

	map = { };
	
	for (var i = 0; i < collidables .length; ++ i)
	{
		var
			collidable = collidables [i],
			position   = collidable .position_changed;
		
		for (var p = 0; p < position .length; p += 2)
		{
			var
				x = position [p + 0],
				y = position [p + 1],
				k = x + \":\" + y,
				m = map [k];
			
			if (! m)
				m = map [k] = [ ];
			
			m .push (collidable);
		}
	}
	
	for (var k in map)
	{
		var m = map [k];
		
		if (m .length < 2)
		{
			delete map [k];
			continue;
		}

		connections .push (currentScene .addRoute (m [0], \"translation_changed\", self, \"set_translation\"));
	}
}

function set_translation (value, time)
{
	for (var k in map)
	{
		var m = map [k];

		for (var c1 = 0; c1 < m .length; ++ c1)
		{
			var collidable1 = m [c1];
		
			for (var c2 = 0; c2 < m .length; ++ c2)
			{
				var collidable2 = m [c2];
		
				if (collidable1 === collidable2)
					continue;

				var
					r = collidable1 .radius + collidable2 .radius,
					l = collidable1 .translation_changed .subtract (collidable2 .translation_changed) .length ();

				if (l < r)
				{
					if (collidable1 .direction_changed == collidable2 .direction_changed)
					{
						if (collidable1 .cycleInterval < collidable2 .cycleInterval)
							collidable1 .set_turnTime = time; 
					}
					else
					{
						collidable1 .set_turnTime = time;
					}
				}
			}
		}
	}
}

function set_collidables (value, time)
{
	var currentScene = Browser .currentScene;

	for (var i = 0; i < routes .length; ++ i)
	{
		currentScene .deleteRoute (routes [i]);
	}

	routes .length = 0;

	for (var i = 0; i < collidables .length; ++ i)
	{
		routes .push (currentScene .addRoute (collidables [i], \"position_changed\", self, \"set_position\"));
	}
}

function eventsProcessed ()
{
	
}
"
    directOutput TRUE
  }
}

PROTO BonusMap [
  inputOutput MFFloat density 1
  inputOutput SFVec3f mazeElementSize 0 0 0
  outputOnly  SFInt32 item_changed
  outputOnly  SFTime  enterTime
  inputOutput SFNode  maze NULL
  inputOutput MFNode  items [ ]
]
{
  DEF Group_1 Collision {
    enabled FALSE
  }

  DEF BonusMapScript Script {
    inputOnly      SFTime  set_triggerTime
    inputOnly      SFTime  set_enterTime
    inputOutput    MFFloat density IS density
    inputOutput    SFVec3f mazeElementSize IS mazeElementSize
    outputOnly     SFInt32 item_changed IS item_changed
    outputOnly     SFTime  enterTime IS enterTime
    inputOutput    SFNode  maze IS maze
    inputOutput    MFNode  items IS items
    initializeOnly SFNode  group USE Group_1
    initializeOnly SFNode  self USE BonusMapScript

    url "ecmascript:

var route;

function initialize ()
{
	set_maze (maze, 0);
}

function set_triggerTime (value, time)
{
	if (! maze)
		return;

	group .children .length = 0;

	for (var y = 0; y < maze .height; ++ y)
	{
		for (var x = 0; x < maze .width; ++ x)
		{
			if (maze .matrix [getIndex (x, y)])
				continue;
	
			for (var d = 0; d < density .length; ++ d)
			{
				if (Math .random () < density [d])
					break;
			}

			if (d >= items .length)
				continue;

			group .children .push (getNode (d, x, y));
		}
	}
}

function set_enterTime (value, time)
{
	enterTime = time;

	for (var i = 0; i < group .children .length; ++ i)
	{
		var
			transform       = group .children [i],
			lod             = transform .children [0],
			visiblitySensor = lod .children [0];
	
		if (visiblitySensor .enterTime == value)
		{
			group .removeChildren = new MFNode (transform);
			break;
		}
	}
}

function set_maze (value, time)
{
	if (route)
		Browser .currentScene .deleteRoute (route);

	if (maze)
		route = Browser .currentScene .addRoute (maze, \"generatedTime\", self, \"set_triggerTime\");
}

function getNode (b, x, y)
{
	var
		currentScene    = Browser .currentScene,
		lod             = currentScene .createNode (\"LOD\"),
		transform       = currentScene .createNode (\"Transform\"),
		visiblitySensor = currentScene .createNode (\"VisibilitySensor\");
	
	Browser .currentScene .addRoute (visiblitySensor, \"enterTime\", self, \"set_enterTime\");
	
	lod .range .push (1);
	lod .children .push (visiblitySensor);
	lod .children .push (items [b]);
	
	visiblitySensor .size  = new SFVec3f (1, 1, 1);
	transform .translation = getTranslation (x, y);
	transform .children .push (lod);
	
	return transform;
}

function getTranslation (x ,y)
{
	var offset = new SFVec3f ((maze .width - 1) * mazeElementSize .x / 2,
	                          0,
	                          (maze .height - 1) * mazeElementSize .z / 2);

	var translation = new SFVec3f (x * mazeElementSize .x, 1.2, y * mazeElementSize .z);

	return translation .subtract (offset);
}

function getIndex (x, y)
{
	return maze .width * y + x;
}

"
    directOutput TRUE
  }
}

PROTO TimeControler [
  inputOutput SFTime resetTime 0
  inputOutput SFNode timer NULL
]
{
  DEF TimeControlerScript Script {
    inputOutput SFTime resetTime IS resetTime
    inputOutput SFNode timer IS timer

    url "ecmascript:

function set_resetTime (value, time)
{
	if (! timer)
		return;

	timer .stopTime  = value;
	timer .startTime = value;
}
"
    directOutput TRUE
  }
}

WorldInfo { }

DEF _7 LayerSet {
  activeLayer 1
  order [ 2, 3 ]
  layers [
    DEF Playground Layer {
      pickable FALSE
      children [
        DEF _8 TimeTrigger { }
        DEF _9 MFInt32 {
          keyValue [ 1, 3 ]
        }
        DEF None NavigationInfo {
          type "NONE"
          transitionType "TELEPORT"
        }
        OrthoViewpoint {
          position 0 50.1169 0
          orientation 1 0 0 270
          fieldOfView [ -36, -20, 36, 20 ]
        }
        DEF _10 Background {
          skyAngle [ 76.5191, 90.0002 ]
          skyColor [ 0.045 0.045 0.045, 0.195 0.195 0.195, 0.185 0.185 0.185 ]
          groundAngle [ 60.5651, 90.0002 ]
          groundColor [ 0 0 0, 0 0 0, 0.185 0.185 0.185 ]
        }
        DirectionalLight {
          intensity 0.656934
          ambientIntensity 0.382716
          direction 0.65147 2.93442e-8 -0.758675
        }
        DirectionalLight {
          ambientIntensity 0.302469
          direction -0.00000352397 -0.860529 0.509401
          shadows TRUE
        }
        DEF Navigation Group {
          children [
            DEF Walk NavigationInfo {
              type "WALK"
              headlight FALSE
              transitionType "TELEPORT"
            }
            DEF _11 Viewpoint {
              description "Maze"
              position 12 2 -28
              orientation 0 1 0 90
              centerOfRotation 2.30881 1.59995 -0.422763
            }
            DEF ViewpointPositionScript Script {
              inputOnly      SFTime     set_triggerTime
              inputOutput    SFVec3f    mazeElementSize 4 2 4
              outputOnly     SFVec3f    position_changed
              outputOnly     SFRotation orientation_changed
              initializeOnly SFNode     maze DEF _12 Maze {
                width 17
                height 17
              }

              url "ecmascript:

function set_triggerTime (value, time)
{
	if (maze .matrix .length == 0)
		return;

	var
		x = -1,
		y = -1;

	do
	{
		x = Math .floor (Math .random () * maze .width);
		y = Math .floor (Math .random () * maze .height);
	}
	while (maze .matrix [getIndex (x, y)] != 0);
						
	var offset = new SFVec3f ((maze .width - 1) * mazeElementSize .x / 2, 0, (maze .height - 1) * mazeElementSize .z / 2);
	


	var position = new SFVec3f (x * mazeElementSize .x, mazeElementSize .y, y * mazeElementSize .z);
	position = position .subtract (offset);
	
	bind                = true;
	position_changed    = position;
	orientation_changed = getRotation (x, y);
}

function getRotation (x, y)
{
	if (x > 0)
		if (maze .matrix [getIndex (x - 1, y)] == 0)
			return new SFRotation (0, 1, 0, 1 / 2 * Math .PI);
		
	if (x < maze .width - 1)
		if (maze .matrix [getIndex (x + 1, y)] == 0)
			return new SFRotation (0, 1, 0, 3 / 2 * Math .PI);
	  
	if (y > 0)
		if (maze .matrix [getIndex (x, y - 1)] == 0)
			return new SFRotation (0, 1, 0, Math .PI);
		
	if (y < maze .height - 1)
		if (maze .matrix [getIndex (x, y + 1)] == 0)
			return new SFRotation (0, 1, 0, 0);

	return new SFRotation (0, 1, 0, 0);
}

function getIndex (x, y)
{
	return maze .width * y + x;
}
"
              directOutput TRUE
            }
          ]
        }
        DEF Walls MazeGeometry {
          mazeElementSize 4 2 4
          mazeElementUrl "maze-element.x3d"
          maze USE _12
        }
        DEF Floor MazeGeometry {
          type [ 0, 1 ]
          rotate FALSE
          mazeElementSize 4 2 4
          mazeElementUrl "maze-floor-element.x3d"
          maze USE _12
        }
        LoadSensor {
          children [
            USE Walls
            USE Floor
            DEF Globe1 Inline {
              global TRUE
              url "globe1.x3d"
            }
          ]
        }
        DEF Globes Group {
          bboxSize 70 10 70
          bboxCenter 0 2 0
          children [
            MazeCollisionManager {
              collidables [
                DEF _13 Globe {
                  enabled TRUE
                  cycleInterval 4
                  radius 2
                  mazeElementSize 4 2 4
                  startTime 1508046433.07247
                  stopTime 1508046433.07247
                  maze USE _12
                  children USE Globe1
                }
                DEF _14 Globe {
                  enabled TRUE
                  cycleInterval 4
                  radius 2
                  mazeElementSize 4 2 4
                  startTime 1507984705.53519
                  stopTime 1507984705.53519
                  maze USE _12
                  children USE Globe1
                }
              ]
            }
            USE _13
            USE _14
          ]
        }
        DEF _15 BonusMap {
          density 0.8
          mazeElementSize 4 2 4
          maze USE _12
          items [
            DEF _16 Inline {
              global TRUE
              url "bonus-mint.x3d"
            }
            DEF _17 Inline {
              global TRUE
              url "bonus-blue.x3d"
            }
          ]
        }
        DEF BonusSound_1 Group {
          children [
            DEF BonusSound Sound {
              intensity 0.133159
              minBack 55
              minFront 55
              maxBack 60
              maxFront 60
              source DEF _18 AudioClip {
                url "star-collect.mp3"
                startTime 1546835705.23872
                pauseTime 1510042948.99191
                stopTime 1546835705.23872
              }
            }
            DEF _19 TimeControler {
              resetTime 1546835705.23872
              timer USE _18
            }
          ]
        }
        DEF _20 VisibilitySensor {
          size -1 -1 -1
        }
      ]
    }
    DEF HUD Layer {
      children [
        DEF _21 TimeTrigger { }
        DEF _22 MFInt32 {
          keyValue [ 2, 3 ]
        }
        DEF Background Transform {
          translation 0 0 -10
          scale 35.7089 35.7089 35.7089
          children Shape {
            appearance Appearance {
              texture ImageTexture {
                url "hud-background.jpg"
                repeatS FALSE
                repeatT FALSE
              }
            }
            geometry Rectangle2D {
              size 1.05833 0.705556
            }
          }
        }
        DEF SugarSmack Transform {
          translation -5.04174 1.24997 0
          children Shape {
            appearance Appearance {
              material DEF Rococo28 Material {
                ambientIntensity 0.226102
                diffuseColor 0 0 0
                specularColor 0.0955906 0.0955906 0.0955906
                shininess 0.078125
              }
            }
            geometry Text {
              string "Sugar Smack"
              solid TRUE
              fontStyle FontStyle {
                family "Minimum-Toc.otf"
                size 0.6
                justify [ "BEGIN", "BEGIN" ]
              }
            }
          }
        }
        DEF StartNewGame Transform {
          children [
            DEF Rectangle2D Transform {
              translation -0.568659 -0.0935914 0
              scale 4.65256 0.593919 1
              children Shape {
                appearance Appearance {
                  material Material {
                    transparency 1
                  }
                }
                geometry Rectangle2D { }
              }
            }
            DEF Text Transform {
              translation -5.04174 0.329928 0
              scale 2.3206 2.3206 2.3206
              children Shape {
                appearance Appearance {
                  material DEF Rococo13 Material {
                    ambientIntensity 0.187004
                    diffuseColor 0.840849 0.227154 0.32302
                    specularColor 0.251984 0.251984 0.251984
                    shininess 0.6
                  }
                }
                geometry Text {
                  string "Start New Game"
                  solid TRUE
                  fontStyle FontStyle {
                    family "Minimum-Toc.otf"
                    size 0.6
                    justify [ "BEGIN", "BEGIN" ]
                  }
                }
              }
            }
            DEF _23 TouchSensor { }
          ]
        }
      ]
    }
    DEF Debug Layer {
      children Switch {
        children DEF Reset Transform {
          translation 6.74236 -3.02708 0
          scale 0.473103 0.473103 0.473103
          children [
            Shape {
              appearance Appearance {
                material Material { }
              }
              geometry Box { }
            }
            DEF _24 BooleanTrigger { }
            DEF _25 BooleanToggle { }
            DEF _26 BooleanFilter { }
            USE _23
          ]
        }
      }
    }
  ]
}

DEF EnterWorldScript Script {
  outputOnly SFBool entered

  url "ecmascript:

function initialize ()
{
	Browser .setBrowserOption (\"Shading\", \"PHONG\");

	entered = true;
}
"
}

DEF _27 BooleanFilter { }

ROUTE ViewpointPositionScript.position_changed TO _11.set_position
ROUTE ViewpointPositionScript.orientation_changed TO _11.set_orientation
ROUTE _25.toggle_changed TO _26.set_boolean
ROUTE _23.touchTime TO _24.set_triggerTime
ROUTE _24.triggerTrue TO _25.set_boolean
ROUTE _20.isActive TO _10.set_bind
ROUTE _12.generatedTime TO ViewpointPositionScript.set_triggerTime
ROUTE _20.isActive TO _11.set_bind
ROUTE EnterWorldScript.entered TO _27.set_boolean
ROUTE _27.inputNegate TO _25.set_toggle
ROUTE _20.isActive TO Walk.set_bind
ROUTE _26.inputTrue TO _8.set_boolean
ROUTE _26.inputFalse TO _21.set_boolean
ROUTE _8.triggerTime TO _12.set_triggerTime
ROUTE _20.isActive TO _13.set_enabled
ROUTE _20.isActive TO _14.set_enabled
ROUTE _15.enterTime TO _19.set_resetTime
ROUTE _22.value_changed TO _7.set_order
ROUTE _21.triggerTime TO _22.set_triggerTime
ROUTE _9.value_changed TO _7.set_order
ROUTE _8.triggerTime TO _9.set_triggerTime
