<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Interchange' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <component name='Shaders' level='1'/>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Wed, 06 Dec 2017 14:14:01 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V4.3.10, http://titania.create3000.de'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/ParticleSystems/ParticleSystem/FresnelShader.x3d'/>
    <meta name='modified' content='Mon, 21 Jan 2019 09:10:40 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='FresnelShader'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFFloat' name='refraction' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='reflection' value='0.1'/>
        <field accessType='inputOutput' type='SFNode' name='cubeMapTexture'/>
      </ProtoInterface>
      <ProtoBody>
        <ComposedShader DEF='FresnelShader'
            language='GLSL'>
          <field accessType='inputOutput' type='SFFloat' name='refraction'/>
          <field accessType='inputOutput' type='SFFloat' name='reflection'/>
          <field accessType='inputOutput' type='SFNode' name='cubMapTexture'/>
          <IS>
            <connect nodeField='refraction' protoField='refraction'/>
            <connect nodeField='reflection' protoField='reflection'/>
            <connect nodeField='cubMapTexture' protoField='cubeMapTexture'/>
          </IS>
          <ShaderPart DEF='VertexShader'>
<![CDATA[data:x-shader/x-vertex,

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform float refraction;
uniform float reflection;

uniform bool  x3d_Lighting;  // true if a X3DMaterialNode is attached, otherwise false

uniform mat4 x3d_CameraSpaceMatrix;
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;

attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec3 v;  // point on geometry
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 vReflect;
varying vec3 vRefract[3];
varying float vReflectionFactor;

void
main ()
{
	mat4 modelMatrix   = x3d_CameraSpaceMatrix * x3d_ModelViewMatrix;
	vec4 position      = x3d_ModelViewMatrix * x3d_Vertex;
	vec4 worldPosition = modelMatrix * x3d_Vertex;
	vec3 worldNormal   = normalize (mat3 (modelMatrix [0] .xyz, modelMatrix [1] .xyz, modelMatrix [2] .xyz) * x3d_Normal);
	vec3 I             = normalize (worldPosition .xyz - x3d_CameraSpaceMatrix [3] .xyz);

	vReflect           = reflect (I, worldNormal);
	vRefract [0]       = refract (I, worldNormal, refraction);
	vRefract [1]       = refract (I, worldNormal, refraction * 0.99);
	vRefract [2]       = refract (I, worldNormal, refraction * 0.98);
	vReflectionFactor  = pow (1.0 + dot (I, worldNormal), 1.0 - reflection);
	
	if (x3d_Lighting)
		vN = normalize (x3d_NormalMatrix * x3d_Normal);
		
	v = position .xyz;

	gl_Position = x3d_ProjectionMatrix * position;
}

]]>
          </ShaderPart>
          <ShaderPart DEF='FragmentShader'
              type='FRAGMENT'>
<![CDATA[data:x-shader/x-fragment,

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform bool x3d_Lighting; // true if a X3DMaterialNode is attached, otherwise false
uniform int x3d_NumLights;
uniform x3d_LightSourceParameters x3d_LightSource [x3d_MaxLights];

uniform bool x3d_SeparateBackColor;
uniform x3d_MaterialParameters x3d_FrontMaterial;
uniform x3d_MaterialParameters x3d_BackMaterial;

uniform samplerCube cubMapTexture;

varying vec3 v;  // point on geometry
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 vReflect;
varying vec3 vRefract [3];
varying float vReflectionFactor;

vec4
getTextureColor ()
{
	vec4 reflectedColor = textureCube (cubMapTexture, vec3 (vReflect .xy, -vReflect .z));
	vec4 refractedColor = vec4 (1.0);

	refractedColor .r = textureCube (cubMapTexture, vec3 (vRefract [0] .xy, -vRefract [0] .z)) .r;
	refractedColor .g = textureCube (cubMapTexture, vec3 (vRefract [1] .xy, -vRefract [1] .z)) .g;
	refractedColor .b = textureCube (cubMapTexture, vec3 (vRefract [2] .xy, -vRefract [2] .z)) .b;

	return mix (refractedColor, reflectedColor, clamp (vReflectionFactor, 0.0, 1.0));
}

float
getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)
{
	float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));
	
	if (spotAngle >= cutOffAngle)
		return 0.0;
	else if (spotAngle <= beamWidth)
		return 1.0;

	return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);
}

vec4
getMaterialColor (in x3d_MaterialParameters material)
{
	vec4 textureColor = getTextureColor ();
	
	if (x3d_Lighting)
	{
		vec3  N  = normalize (gl_FrontFacing ? vN : -vN);
		vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position
		float dV = length (v);

		// Calculate diffuseFactor & alpha

		float alpha = 1.0 - material .transparency;

		alpha *= textureColor .a;

		// Apply light sources

		vec3 finalColor = textureColor .rgb;

		for (int i = 0; i < x3d_MaxLights; ++ i)
		{
			if (i == x3d_NumLights)
				break;
			
			x3d_LightSourceParameters light = x3d_LightSource [i];

			vec3  vL = light .location - v;
			float dL = length (vL);
			bool  di = light .type == x3d_DirectionalLight;

			if (di || dL <= light .radius)
			{
				vec3 d = light .direction;
				vec3 c = light .attenuation;
				vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.
				vec3 H = normalize (L + V);             // Specular term

				float lightAngle            = dot (N, L);      // Angle between normal and light ray.
				float specularFactor        = material .shininess > 0.0 ? pow (max (dot (N, H), 0.0), material .shininess * 128.0) : 1.0;
				float attenuationFactor     = di ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);
				float spotFactor            = light .type == x3d_SpotLight ? getSpotFactor (light .cutOffAngle, light .beamWidth, L, d) : 1.0;
				float attenuationSpotFactor = attenuationFactor * spotFactor;
				vec3  specularTerm          = material .specularColor * specularFactor;

				finalColor += attenuationSpotFactor * light .color * light .intensity * specularTerm;
			}
		}

		return vec4 (finalColor, alpha);
	}
	else
	{
		return textureColor;
	}
}

void
main ()
{
	bool frontColor = gl_FrontFacing || ! x3d_SeparateBackColor;

	gl_FragColor = frontColor ? getMaterialColor (x3d_FrontMaterial) : getMaterialColor (x3d_BackMaterial);
}
]]>
          </ShaderPart>
        </ComposedShader>
      </ProtoBody>
    </ProtoDeclare>
    <WorldInfo
        title='FresnelShader'>
      <MetadataSet DEF='Titania'
          name='Titania'
          reference='http://titania.create3000.de'>
        <MetadataSet DEF='Page' containerField='value'
            name='Page'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='activeView' containerField='value'
              name='activeView'
              reference='http://titania.create3000.de'
              value='1'/>
          <MetadataInteger DEF='multiView' containerField='value'
              name='multiView'
              reference='http://titania.create3000.de'
              value='0'/>
        </MetadataSet>
        <MetadataSet DEF='Selection' containerField='value'
            name='Selection'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='selectGeometry' containerField='value'
              name='selectGeometry'
              reference='http://titania.create3000.de'
              value='false'/>
        </MetadataSet>
      </MetadataSet>
    </WorldInfo>
  </Scene>
</X3D>
