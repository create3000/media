#X3D V3.3 utf8 Titania V4.4.3

PROFILE Immersive

COMPONENT Grouping : 3
COMPONENT Shape : 3
COMPONENT Time : 2

META "comment" "World of Titania"
META "created" "Tue, 03 Jul 2018 02:20:51 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.3.9, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/Rendering/IndexedLineSet/IndexedLineSet.O.x3d"
META "modified" "Mon, 07 Jan 2019 03:31:39 GMT"

PROTO Cloth [
  inputOutput SFFloat width 1
  inputOutput SFFloat height 1
  inputOutput SFInt32 xDimension 10
  inputOutput SFInt32 yDimension 10
]
{
  Group {
    children [
      Shape {
        geometry DEF _1 IndexedLineSet {
          coordIndex [ 10, 0, 1, -1, 11, 1, 2, -1, 12, 2, 3, -1, 13, 3, 4, -1, 14, 4, 5, -1, 15, 5, 6, -1, 16, 6, 7, -1, 17, 7, 8, -1, 18, 8, 9, -1, 19, 9, -1, 20, 10, 11, -1, 21, 11, 12, -1, 22, 12, 13, -1, 23, 13, 14, -1, 24, 14, 15, -1, 25, 15, 16, -1, 26, 16, 17, -1, 27, 17, 18, -1, 28, 18, 19, -1, 29, 19, -1, 30, 20, 21, -1, 31, 21, 22, -1, 32, 22, 23, -1, 33, 23, 24, -1, 34, 24, 25, -1, 35, 25, 26, -1, 36, 26, 27, -1, 37, 27, 28, -1, 38, 28, 29, -1, 39, 29, -1, 40, 30, 31, -1, 41, 31, 32, -1, 42, 32, 33, -1, 43, 33, 34, -1, 44, 34, 35, -1, 45, 35, 36, -1, 46, 36, 37, -1, 47, 37, 38, -1, 48, 38, 39, -1, 49, 39, -1, 50, 40, 41, -1, 51, 41, 42, -1, 52, 42, 43, -1, 53, 43, 44, -1, 54, 44, 45, -1, 55, 45, 46, -1, 56, 46, 47, -1, 57, 47, 48, -1, 58, 48, 49, -1, 59, 49, -1, 60, 50, 51, -1, 61, 51, 52, -1, 62, 52, 53, -1, 63, 53, 54, -1, 64, 54, 55, -1, 65, 55, 56, -1, 66, 56, 57, -1, 67, 57, 58, -1, 68, 58, 59, -1, 69, 59, -1, 70, 60, 61, -1, 71, 61, 62, -1, 72, 62, 63, -1, 73, 63, 64, -1, 74, 64, 65, -1, 75, 65, 66, -1, 76, 66, 67, -1, 77, 67, 68, -1, 78, 68, 69, -1, 79, 69, -1, 80, 70, 71, -1, 81, 71, 72, -1, 82, 72, 73, -1, 83, 73, 74, -1, 84, 74, 75, -1, 85, 75, 76, -1, 86, 76, 77, -1, 87, 77, 78, -1, 88, 78, 79, -1, 89, 79, -1, 90, 80, 81, -1, 91, 81, 82, -1, 92, 82, 83, -1, 93, 83, 84, -1, 94, 84, 85, -1, 95, 85, 86, -1, 96, 86, 87, -1, 97, 87, 88, -1, 98, 88, 89, -1, 99, 89, -1, 90, 91, -1, 91, 92, -1, 92, 93, -1, 93, 94, -1, 94, 95, -1, 95, 96, -1, 96, 97, -1, 97, 98, -1, 98, 99, -1 ]
          color Color {
            color [ 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.0709665 0.057818 0.0480935, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.160304 0.130604 0.108637, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.249642 0.203389 0.169181, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.33898 0.276175 0.229725, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.428318 0.348961 0.290269, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.517656 0.421746 0.350812, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.606994 0.494532 0.411356, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.696332 0.567317 0.4719, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.78567 0.640103 0.532444, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988, 0.875008 0.712889 0.592988 ]
          }
          coord DEF _2 Coordinate {
            point [ 0 0 0, 0.111111 0 0, 0.222222 0 0, 0.333333 0 0, 0.444444 0 0, 0.555556 0 0, 0.666667 0 0, 0.777778 0 0, 0.888889 0 0, 1 0 0, 0 0.111111 0, 0.111111 0.111111 0, 0.222222 0.111111 0, 0.333333 0.111111 0, 0.444444 0.111111 0, 0.555556 0.111111 0, 0.666667 0.111111 0, 0.777778 0.111111 0, 0.888889 0.111111 0, 1 0.111111 0, 0 0.222222 0, 0.111111 0.222222 0, 0.222222 0.222222 0, 0.333333 0.222222 0, 0.444444 0.222222 0, 0.555556 0.222222 0, 0.666667 0.222222 0, 0.777778 0.222222 0, 0.888889 0.222222 0, 1 0.222222 0, 0 0.333333 0, 0.111111 0.333333 0, 0.222222 0.333333 0, 0.333333 0.333333 0, 0.444444 0.333333 0, 0.555556 0.333333 0, 0.666667 0.333333 0, 0.777778 0.333333 0, 0.888889 0.333333 0, 1 0.333333 0, 0 0.444444 0, 0.111111 0.444444 0, 0.222222 0.444444 0, 0.333333 0.444444 0, 0.444444 0.444444 0, 0.555556 0.444444 0, 0.666667 0.444444 0, 0.777778 0.444444 0, 0.888889 0.444444 0, 1 0.444444 0, 0 0.555556 0, 0.111111 0.555556 0, 0.222222 0.555556 0, 0.333333 0.555556 0, 0.444444 0.555556 0, 0.555556 0.555556 0, 0.666667 0.555556 0, 0.777778 0.555556 0, 0.888889 0.555556 0, 1 0.555556 0, 0 0.666667 0, 0.111111 0.666667 0, 0.222222 0.666667 0, 0.333333 0.666667 0, 0.444444 0.666667 0, 0.555556 0.666667 0, 0.666667 0.666667 0, 0.777778 0.666667 0, 0.888889 0.666667 0, 1 0.666667 0, 0 0.777778 0, 0.111111 0.777778 0, 0.222222 0.777778 0, 0.333333 0.777778 0, 0.444444 0.777778 0, 0.555556 0.777778 0, 0.666667 0.777778 0, 0.777778 0.777778 0, 0.888889 0.777778 0, 1 0.777778 0, 0 0.888889 0, 0.111111 0.888889 0, 0.222222 0.888889 0, 0.333333 0.888889 0, 0.444444 0.888889 0, 0.555556 0.888889 0, 0.666667 0.888889 0, 0.777778 0.888889 0, 0.888889 0.888889 0, 1 0.888889 0, 0 1 0, 0.111111 1 0, 0.222222 1 0, 0.333333 1 0, 0.444444 1 0, 0.555556 1 0, 0.666667 1 0, 0.777778 1 0, 0.888889 1 0, 1 1 0 ]
          }
        }
      }
      Shape {
        appearance Appearance {
          material Material {
            transparency 1
          }
        }
        geometry DEF _3 IndexedTriangleSet {
          normalPerVertex FALSE
          index [ 0, 1, 10, 1, 11, 10, 1, 2, 11, 2, 12, 11, 2, 3, 12, 3, 13, 12, 3, 4, 13, 4, 14, 13, 4, 5, 14, 5, 15, 14, 5, 6, 15, 6, 16, 15, 6, 7, 16, 7, 17, 16, 7, 8, 17, 8, 18, 17, 8, 9, 18, 9, 19, 18, 10, 11, 20, 11, 21, 20, 11, 12, 21, 12, 22, 21, 12, 13, 22, 13, 23, 22, 13, 14, 23, 14, 24, 23, 14, 15, 24, 15, 25, 24, 15, 16, 25, 16, 26, 25, 16, 17, 26, 17, 27, 26, 17, 18, 27, 18, 28, 27, 18, 19, 28, 19, 29, 28, 20, 21, 30, 21, 31, 30, 21, 22, 31, 22, 32, 31, 22, 23, 32, 23, 33, 32, 23, 24, 33, 24, 34, 33, 24, 25, 34, 25, 35, 34, 25, 26, 35, 26, 36, 35, 26, 27, 36, 27, 37, 36, 27, 28, 37, 28, 38, 37, 28, 29, 38, 29, 39, 38, 30, 31, 40, 31, 41, 40, 31, 32, 41, 32, 42, 41, 32, 33, 42, 33, 43, 42, 33, 34, 43, 34, 44, 43, 34, 35, 44, 35, 45, 44, 35, 36, 45, 36, 46, 45, 36, 37, 46, 37, 47, 46, 37, 38, 47, 38, 48, 47, 38, 39, 48, 39, 49, 48, 40, 41, 50, 41, 51, 50, 41, 42, 51, 42, 52, 51, 42, 43, 52, 43, 53, 52, 43, 44, 53, 44, 54, 53, 44, 45, 54, 45, 55, 54, 45, 46, 55, 46, 56, 55, 46, 47, 56, 47, 57, 56, 47, 48, 57, 48, 58, 57, 48, 49, 58, 49, 59, 58, 50, 51, 60, 51, 61, 60, 51, 52, 61, 52, 62, 61, 52, 53, 62, 53, 63, 62, 53, 54, 63, 54, 64, 63, 54, 55, 64, 55, 65, 64, 55, 56, 65, 56, 66, 65, 56, 57, 66, 57, 67, 66, 57, 58, 67, 58, 68, 67, 58, 59, 68, 59, 69, 68, 60, 61, 70, 61, 71, 70, 61, 62, 71, 62, 72, 71, 62, 63, 72, 63, 73, 72, 63, 64, 73, 64, 74, 73, 64, 65, 74, 65, 75, 74, 65, 66, 75, 66, 76, 75, 66, 67, 76, 67, 77, 76, 67, 68, 77, 68, 78, 77, 68, 69, 78, 69, 79, 78, 70, 71, 80, 71, 81, 80, 71, 72, 81, 72, 82, 81, 72, 73, 82, 73, 83, 82, 73, 74, 83, 74, 84, 83, 74, 75, 84, 75, 85, 84, 75, 76, 85, 76, 86, 85, 76, 77, 86, 77, 87, 86, 77, 78, 87, 78, 88, 87, 78, 79, 88, 79, 89, 88, 80, 81, 90, 81, 91, 90, 81, 82, 91, 82, 92, 91, 82, 83, 92, 83, 93, 92, 83, 84, 93, 84, 94, 93, 84, 85, 94, 85, 95, 94, 85, 86, 95, 86, 96, 95, 86, 87, 96, 87, 97, 96, 87, 88, 97, 88, 98, 97, 88, 89, 98, 89, 99, 98 ]
          coord USE _2
        }
      }
      DEF _4 PlaneSensor {
        description "Click and drag cloth."
      }
    ]
  }

  DEF _5 TimeSensor {
    cycleInterval 0.033333333
    loop TRUE
  }

  DEF ClothScript Script {
    inputOnly      SFBool  set_active
    inputOnly      SFVec3f set_trackPoint
    inputOnly      SFTime  set_time
    inputOutput    SFFloat width IS width
    inputOutput    SFFloat height IS height
    inputOutput    SFInt32 xDimension IS xDimension
    inputOutput    SFInt32 yDimension IS yDimension
    initializeOnly SFVec2f spacing 0.111111 0.111111
    initializeOnly SFNode  lines USE _1
    initializeOnly SFNode  faces USE _3
    initializeOnly SFNode  coord USE _2
    initializeOnly SFNode  touch USE _4

    url "ecmascript:

var
	cloth      = 0,
	trackPoint = null;

function initialize ()
{
	build ();
}

function set_active (value, time)
{
	if (value)
	{
		trackPoint = cloth .getClosestPoint (touch .trackPoint_changed);
		
		trackPoint .inv_mass = 0;
	}
	else
	{
		trackPoint .inv_mass = 1;
	}
}

function set_trackPoint (value, time)
{
	if (! touch .isActive)
		return;

	trackPoint .setCurrent (value);
}

function set_time (value, time)
{
	var
		point = coord .point;

	cloth .update ();
	
	for (var y = 0; y < yDimension; ++ y)
	{
		for (var x = 0; x < xDimension; ++ x)
		{
			var p = cloth .points [y] [x];

			point [getIndex (x, y)] = p .current;
		}
	}
}

function set_width (value, time)
{
	build ();
}

function set_height (value, time)
{
	build ();
}

function set_xDimension (value, time)
{
	build ();
}

function set_yDimension (value, time)
{
	build ();
}

function build ()
{
	spacing .x = width / (xDimension - 1);
	spacing .y = height / (yDimension - 1);

	if (spacing .x == 0 || spacing .y == 0)
		return;

	var
		linesIndex = new MFInt32 (),
		facesIndex = new MFInt32 (),
		h          = Math .random (),
		s          = Math .random (),
		color1     = new SFColor (),
		color2     = new SFColor (),
		color      = lines .color .color,
		point      = coord .point;

	color1 .setHSV (h, s, Math .random () * 0.25);
	color2 .setHSV (h, s, Math .random () * 0.25 + 0.75);

	color .length = 0;
	point .length = 0;

	for (var y = 0; y < yDimension; ++ y)
	{
		for (var x = 0; x < xDimension; ++ x)
		{
			color .push (color1 .lerp (color2, y / yDimension));
			point .push (new SFVec3f (x * spacing .x, y * spacing .y, 0));
		}
	}
	
	for (var y = 0; y < yDimension; ++ y)
	{
		for (var x = 0; x < xDimension; ++ x)
		{
			var
				x1 = x,
				y1 = y,
				x2 = x + 1,
				y2 = y + 1;

			if (x2 >= xDimension && y2 >= yDimension)
			{
				continue;
			}
			else if (x2 >= xDimension)
			{
				linesIndex .push (getIndex (x1, y2),
					               getIndex (x1, y1),
					               -1);
			}
			else if (y2 >= yDimension)
			{
				linesIndex .push (getIndex (x1, y1),
					               getIndex (x2, y1),
					               -1);
			}
			else
			{
				linesIndex .push (getIndex (x1, y2),
					               getIndex (x1, y1),
					               getIndex (x2, y1),
					               -1);
					               
				facesIndex .push (getIndex (x1, y1),
					               getIndex (x2, y1),
					               getIndex (x1, y2),
					               getIndex (x2, y1),
					               getIndex (x2, y2),
					               getIndex (x1, y2));
			}
		}
	}

	lines .set_coordIndex = linesIndex;
	faces .index          = facesIndex;
	
	cloth = new Cloth (width, height, xDimension, yDimension);
}

function getIndex (x, y)
{
	return y * xDimension + x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

var Point = function (x, y, z)
{
	this .current = this .previous = new SFVec3f (x, y, z);
	this .mass    = this .inv_mass = 1;
	this .force   = new SFVec3f (0.0, -0.5, 0) .multiply (0.05 * 0.05);
	this .radius  = 3;
};

Point.prototype = {
	setCurrent: function (p)
	{
		this .current = p;
	},
	
	setPrevious: function (p)
	{
		this .previous = p;
	},
	
	getCurrent: function ()
	{
		return this .current;
	},
	
	getPrevious: function ()
	{
		return this .previous;
	},
	
	move: function ()
	{
		if (this .inv_mass === 0)
			return;
			
		var new_pos = this .current .multiply (1.99) .subtract (this .previous .multiply (0.99)) .add (this.force);
		
		this .previous = this .current;
		this .current = new_pos;
	},
	
};

var Constraint = function (p1, p2, rl)
{
	this .p1                  = p1;
	this .p2                  = p2;
	this .rest_length         = rl || p1 .getCurrent () .subtract (p2 .getCurrent()) .length ();
	this .squared_rest_length = this .rest_length * this .rest_length;
};

Constraint.prototype = {	
	satisfy: function ()
	{
		var p1    = this .p1 .getCurrent ();
		var p2    = this .p2 .getCurrent ();
		var delta = p2 .subtract (p1);
		
		var p1_im = this .p1.inv_mass;
		var p2_im = this .p2.inv_mass;
		
		var d    = delta .dot (delta);
		var diff = (d - this .squared_rest_length) / ((this .squared_rest_length + d) * (p1_im + p2_im));
		
		if (p1_im !== 0)
		{
			this .p1 .setCurrent (p1 .add (delta .multiply (p1_im * diff)));
		}
		
		if (p2_im !== 0)
		{
			this .p2 .setCurrent (p2 .subtract (delta .multiply (p2_im * diff)));
		}
	}
};

var Cloth = function(width, height, xDimension, yDimension){
	
	var
		spacing = new SFVec2f (width / xDimension, height / yDimension),
		max_dim = Math .max (width, height),
		min_dim = Math .min (width, height);

	this .num_iterations = 2;
	this .points         = [ ];
	this .constraints    = [ ];
	
	this .xDimension = xDimension;
	this .yDimension = yDimension;

	var constraint;
	
	for (var i = 0, y = 0; i < yDimension; ++ i, y += spacing .y)
	{
		this .points [i] = [ ];
		
		for (var j = 0, x = 0; j < xDimension; ++ j, x += spacing .x)
		{
			this .points [i] [j] = new Point (x, y, 0);
			
			//add a vertical constraint
			if (i > 0)
			{
				this .constraints .push (new Constraint (this .points [i - 1] [j], this .points [i] [j]));
			}
			
			//add a new horizontal constraints
			if (j > 0)
			{
				this .constraints .push (new Constraint (this .points [i] [j - 1], this .points [i] [j]));
			}
		}
	}

	//pin the top right and top left.
	this .points [yDimension - 1] [0]                            .inv_mass = 0;
	this .points [yDimension - 1] [Math .floor (xDimension / 2)] .inv_mass = 0;
	this .points [yDimension - 1] [xDimension - 1]               .inv_mass = 0;

	this .num_constraints = this .constraints .length;
};

Cloth.prototype = {
	update: function ()
	{
		var
			num_x = this .xDimension,
			num_y = this .yDimension,
			num_c = this .num_constraints,
			num_i = this .num_iterations;
			
		//move each point with a pull from gravity
		for (var i = 0; i < num_y; ++ i)
		{
			for (var j = 0; j < num_x; ++ j)
				this .points [i] [j] .move ();
		}
		
		//make sure all the constraints are satisfied.
		for (var j = 0; j < num_i; ++ j)
		{
			for (var i = 0; i < num_c; ++ i)
				this .constraints [i] .satisfy ();
		}
	},
	
	getClosestPoint: function (pos)
	{
		var
			min_dist  = 1,
			min_point = null,
			num_x     = this.xDimension,
			num_y     = this.yDimension;
		
		for (var y = 0; y < num_y; ++ y)
		{
			for (var x = 0; x < num_x; ++ x)
			{
				var dist = pos .subtract (this .points [y] [x] .getCurrent ()) .length();
				
				if (dist < min_dist)
				{
					min_dist  = dist;
					min_point = this .points [y] [x];
				}
			}
		}

		return min_point;
	},
};
"
    directOutput TRUE
  }

  ROUTE _5.cycleTime TO ClothScript.set_time
  ROUTE _4.isActive TO ClothScript.set_active
  ROUTE _4.trackPoint_changed TO ClothScript.set_trackPoint
}

WorldInfo {
}

NavigationInfo {
  type "NONE"
}

Viewpoint {
  description "Initial View"
  position 0.864865 0.304953 1.70369
  centerOfRotation 0.864865 0.304953 0
}

DEF Cloth Transform {
  children Cloth {
    width 1.77778
    xDimension 37
    yDimension 21
  }
}
