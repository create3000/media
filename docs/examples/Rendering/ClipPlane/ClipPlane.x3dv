#X3D V4.0 utf8 X_ITE V8.4.3

PROFILE Interchange

COMPONENT Geometry2D : 2
COMPONENT Scripting : 1

META "comment" "World of Titania"
META "created" "Tue, 11 Oct 2016 17:39:49 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.6.7, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/Rendering/ClipPlane/ClipPlane.O.x3d"
META "modified" "Thu, 07 Nov 2019 13:01:51 GMT"
META "converter" "x3d-tidy V1.0.8, https://github.com/create3000/x3d-tidy#readme"
META "converted" "Thu, 05 Jan 2023 10:44:50 GMT"

PROTO Grid [
  inputOutput    SFVec3f    translation 0 0 0
  inputOutput    SFRotation rotation 0 0 1 0
  inputOutput    SFVec3f    scale 1 1 1
  inputOutput    MFInt32    dimension [ 10, 10, 10 ]
  inputOutput    MFInt32    majorLineEvery [ 5, 5, 5 ]
  inputOutput    MFInt32    majorLineOffset [ 0, 0, 0 ]
  inputOutput    SFColor    color 0.5 0.5 0.5
  inputOutput    SFFloat    transparency 0.61803
  inputOutput    SFColor    lineColor 1 0.7 0.7
  inputOutput    SFFloat    lineTransparency 0.8
  inputOutput    SFColor    majorLineColor 1 0.7 0.7
  inputOutput    SFFloat    majorLineTransparency 0.6
  initializeOnly SFBool     solid TRUE
]
{
  Transform {
    translation IS translation
    rotation IS rotation
    scale IS scale
    children [
      DEF Plane Transform {
        rotation -3.09087122910219e-8 0.70710528118436 0.707108281185553 3.14159
        scale 10 10 1
        children Shape {
          appearance Appearance {
            material DEF Material2 Material {
              diffuseColor 0 0 0
              emissiveColor IS color
              transparency IS transparency
            }
          }
          geometry Rectangle2D {
            size 1 1
            solid IS solid
          }
        }
      }
      DEF MajorGrid Shape {
        appearance Appearance {
          material DEF MajorMaterial Material {
            emissiveColor IS majorLineColor
            transparency IS majorLineTransparency
          }
        }
        geometry DEF MajorGrid_1 IndexedLineSet {
          coordIndex [ 0, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7, -1, 8, 9, -1, 10, 11, -1 ]
          coord Coordinate {
            point [ -5 0 -5.25, -5 0 5.25, 0 0 -5.25, 0 0 5.25, 5 0 -5.25, 5 0 5.25, -5.25 0 -5, 5.25 0 -5, -5.25 0 0, 5.25 0 0, -5.25 0 5, 5.25 0 5 ]
          }
        }
      }
      DEF MinorGrid Shape {
        appearance Appearance {
          material DEF MinorMaterial Material {
            emissiveColor IS lineColor
            transparency IS lineTransparency
          }
        }
        geometry DEF MinorGrid_1 IndexedLineSet {
          coordIndex [ 0, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7, -1, 8, 9, -1, 10, 11, -1, 12, 13, -1, 14, 15, -1, 16, 17, -1, 18, 19, -1, 20, 21, -1, 22, 23, -1, 24, 25, -1, 26, 27, -1, 28, 29, -1, 30, 31, -1 ]
          coord Coordinate {
            point [ -4 0 -5, -4 0 5, -3 0 -5, -3 0 5, -2 0 -5, -2 0 5, -1 0 -5, -1 0 5, 1 0 -5, 1 0 5, 2 0 -5, 2 0 5, 3 0 -5, 3 0 5, 4 0 -5, 4 0 5, -5 0 -4, 5 0 -4, -5 0 -3, 5 0 -3, -5 0 -2, 5 0 -2, -5 0 -1, 5 0 -1, -5 0 1, 5 0 1, -5 0 2, 5 0 2, -5 0 3, 5 0 3, -5 0 4, 5 0 4 ]
          }
        }
      }
      DEF MajorPoints Shape {
        appearance Appearance {
          pointProperties PointProperties {
            pointSizeScaleFactor 6
            pointSizeMaxValue 6
          }
          material USE MajorMaterial
        }
        geometry DEF MajorPoints_1 PointSet {
          coord Coordinate {
            point [ 0 -5 0, 0 0 0, 0 5 0 ]
          }
        }
      }
      DEF MinorPoints Shape {
        appearance Appearance {
          pointProperties PointProperties {
            pointSizeScaleFactor 4
            pointSizeMaxValue 4
          }
          material USE MinorMaterial
        }
        geometry DEF MinorPoints_1 PointSet {
          coord Coordinate {
            point [ 0 -4 0, 0 -3 0, 0 -2 0, 0 -1 0, 0 1 0, 0 2 0, 0 3 0, 0 4 0 ]
          }
        }
      }
    ]
  }

  DEF GridScript Script {
    inputOutput    MFInt32 dimension IS dimension
    inputOutput    MFInt32 majorLineEvery IS majorLineEvery
    inputOutput    MFInt32 majorLineOffset IS majorLineOffset
    initializeOnly SFNode  plane USE Plane
    initializeOnly SFNode  majorGrid USE MajorGrid_1
    initializeOnly SFNode  minorGrid USE MinorGrid_1
    initializeOnly SFNode  majorPoints USE MajorPoints_1
    initializeOnly SFNode  minorPoints USE MinorPoints_1

    url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	// Plane

	plane .scale = new SFVec3f (dimension [0], dimension [2], 1);

	// Grid

	generateGrid (true, majorGrid);
	generateGrid (false, minorGrid);

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);
}

function generateGrid (major, grid)
{
	var point       = grid .coord .point;
	var coordIndex  = new MFInt32 ();
	var scaleX1_2   = dimension [0] / 2;
	var scaleZ1_2   = dimension [2] / 2;
	var majorAdd    = major / 4;
	var p           = 0;

	for (var i = 0, size = dimension [0] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 0))
			continue;

		var x = -scaleX1_2 + i;

		point [p]     = new SFVec3f (x, 0, -scaleZ1_2 - majorAdd);
		point [p + 1] = new SFVec3f (x, 0,  scaleZ1_2 + majorAdd);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
			
		p += 2;
	}

	for (var i = 0, size = dimension [2] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 2))
			continue;

		var z = -scaleZ1_2 + i;

		point [p]     = new SFVec3f (-scaleX1_2 - majorAdd, 0, z);
		point [p + 1] = new SFVec3f ( scaleX1_2 + majorAdd, 0, z);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
		
		p += 2;
	}

	point .length = p;

	grid .set_coordIndex = coordIndex;
}

function generatePoints (major, point)
{
	var scaleY1_2 = -dimension [1] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 1))
			continue;

		point [p] = new SFVec3f (0, scaleY1_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 3)
	{
		if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}
"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

WorldInfo { }

Viewpoint {
  description "Home"
  position 20.8877 22.923 30.0087
  orientation -0.669331169782766 0.718448014221236 0.189283480575554 0.817475942569067
}

Grid {
  scale 0.5 0.5 0.5
  dimension [ 50, 10, 50 ]
  transparency 0.8
}

Transform {
  children [
    DEF Boxes Inline {
      global TRUE
      url "boxes.x3d"
    }
    DEF _1 ClipPlane {
      plane -1 0 0 5.75581
    }
    DEF _2 ClipPlane {
      plane 1 0 0 5.75581
    }
    DEF _3 ClipPlane {
      plane 0 0 1 5.75581
    }
    DEF _4 ClipPlane {
      plane 0 0 -1 5.75581
    }
    DEF _5 ClipPlane {
      plane 0 1 0 5.75581
    }
    DEF _6 ClipPlane {
      plane 0 -1 0 5.75581
    }
    DEF ClipPlanesScript Script {
      inputOutput SFFloat distanceFromOrigin 5.75581
      inputOutput MFNode  planes [
        USE _1
        USE _2
        USE _3
        USE _4
        USE _5
        USE _6
      ]

      url "ecmascript:

function set_distanceFromOrigin (value)
{
	for (var i = 0; i < planes .length; ++ i)
	{
		planes [i] .plane .w = value;
	}
}"
      directOutput TRUE
    }
  ]
}

IMPORT Boxes.ClipPlanesScriptDistanceFromOriginInterpolator

ROUTE ClipPlanesScriptDistanceFromOriginInterpolator.value_changed TO ClipPlanesScript.set_distanceFromOrigin
