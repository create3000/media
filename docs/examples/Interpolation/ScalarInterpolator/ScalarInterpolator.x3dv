#X3D V4.0 utf8 X_ITE V8.6.8

PROFILE Interchange

COMPONENT Geometry2D : 2
COMPONENT Layout : 2
COMPONENT PointingDeviceSensor : 1
COMPONENT Scripting : 1

UNIT angle degree 0.017453292519943295

META "comment" "Rise and Shine"
META "created" "Wed, 22 Nov 2017 08:26:49 GMT"
META "creator" "Holger Seelig"
META "generator" "Sunrise X3D Editor V1.0.8, https://create3000.github.io/sunrise/"
META "identifier" "file:///Users/holger/Desktop/X_ITE/media/docs/examples/Interpolation/ScalarInterpolator/ScalarInterpolator.O.x3d"
META "modified" "Fri, 10 Feb 2023 23:51:36 GMT"
META "converter" "x3d-tidy V1.0.14, https://www.npmjs.com/package/x3d-tidy"
META "converted" "Mon, 29 May 2023 17:55:15 GMT"

EXTERNPROTO Grid [
  inputOutput    SFVec3f    translation
  inputOutput    SFRotation rotation
  inputOutput    SFVec3f    scale
  inputOutput    MFInt32    dimension
  inputOutput    MFInt32    majorLineEvery
  inputOutput    MFInt32    majorLineOffset
  inputOutput    SFVec3f    planeOffset
  inputOutput    SFColor    planeColor
  inputOutput    SFFloat    planeTransparency
  inputOutput    SFColor    lineColor
  inputOutput    SFFloat    lineTransparency
  inputOutput    SFColor    majorLineColor
  inputOutput    SFFloat    majorLineTransparency
  inputOutput    SFVec3f    numberOffset
  inputOutput    SFNode     numberAppearance
  inputOutput    SFNode     numberFontStyle
  initializeOnly SFBool     solid
]
"Grid.x3d#Grid"

EXTERNPROTO LineTrail [
  inputOutput SFTime  resetTime
  inputOutput SFVec3f point
  inputOutput SFInt32 dimension
]
"LineTrail.x3d#LineTrail"

WorldInfo {
  title "ScalarInterpolator.O"
}

NavigationInfo {
  type "NONE"
}

Viewpoint {
  description "Initial View"
  position 0 0 28.9553
}

Grid {
  rotation 1 0 0 90
  dimension [ 60, 0, 30 ]
  planeOffset 0 -0.002 0
  planeColor 1 1 1
  planeTransparency 0
  lineColor 0 0 0
  majorLineColor 0 0 0
  majorLineTransparency 0.4
  numberOffset -0.1 0 0.14
  numberAppearance DEF _1 Appearance {
    material Material {
      diffuseColor 0 0 0
    }
  }
  numberFontStyle DEF _2 ScreenFontStyle {
    justify [ "END", "BEGIN" ]
  }
}

DEF LineTrail Group {
  children [
    DEF Timer TimeSensor {
      cycleInterval 10
      loop TRUE
    }
    DEF XInterpolator ScalarInterpolator {
      key [ 0, 0.375, 0.75, 1 ]
      keyValue [ -20, -5, 10, 20 ]
    }
    DEF YInterpolator ScalarInterpolator {
      key [ -20, -5, 10, 20 ]
      keyValue [ -10, 5, -5, 10 ]
    }
    DEF TrailScript Script {
      inputOnly      SFFloat set_y
      outputOnly     SFVec3f point_changed
      initializeOnly SFNode  xInterpolator USE XInterpolator
      initializeOnly SFNode  yInterpolator USE YInterpolator

      url "ecmascript:

function set_y (value, time)
{
	point_changed .x = xInterpolator .value_changed;
	point_changed .y = yInterpolator .value_changed;
}
"
      directOutput TRUE
    }
    Shape {
      appearance Appearance {
        lineProperties DEF _3 LineProperties {
          linewidthScaleFactor 3
        }
        material Material {
          emissiveColor 0.552941 0.270588 0.14902
        }
      }
      geometry DEF Trail LineTrail {
        resetTime 1676073090.3630009
        point 4.208 -1.138667 0
        dimension 1000
      }
    }
  ]
}

DEF Points Transform {
  children [
    DEF PointsScript Script {
      inputOnly      MFFloat set_x
      inputOnly      MFFloat set_y
      initializeOnly SFNode  points DEF _4 Polypoint2D {
        point [ -20 -10, -5 5, 10 -5, 20 10 ]
      }
      initializeOnly SFNode  xInterpolator USE XInterpolator
      initializeOnly SFNode  yInterpolator USE YInterpolator

      url "ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	for (var i = 0, length = xInterpolator .keyValue .length; i < length; ++ i)
	{
		points .point [i] .x = xInterpolator .keyValue [i];
		points .point [i] .y = yInterpolator .keyValue [i];
	}

	points .point .length = i;
}
"
      directOutput TRUE
    }
    Shape {
      appearance Appearance {
        pointProperties PointProperties {
          pointSizeScaleFactor 20
          pointSizeMaxValue 20
        }
        material Material {
          emissiveColor 1 0.75 0.5
        }
      }
      geometry USE _4
    }
    Shape {
      appearance Appearance {
        pointProperties PointProperties {
          pointSizeScaleFactor 8
          pointSizeMaxValue 8
        }
        material Material {
          emissiveColor 1 0.5 0
        }
      }
      geometry USE _4
    }
  ]
}

DEF Touch TouchSensor { }

DEF PickingScript Script {
  inputOnly      SFTime  set_touchTime
  inputOnly      SFVec3f set_hitPoint
  inputOutput    SFBool  active FALSE
  outputOnly     SFTime  doubleClickTime
  initializeOnly SFTime  doubleClickInterval 0.3
  initializeOnly SFFloat pointSize 0.5
  initializeOnly SFNode  xInterpolator USE XInterpolator
  initializeOnly SFNode  yInterpolator USE YInterpolator

  url "ecmascript:

var
	firstTime  = 0,
	pointIndex = -1,
	hitPoint   = new SFVec2f (),
	offset     = new SFVec2f ();

function initialize ()
{
	xInterpolator .key      = new MFFloat (0, 0.375, 0.75, 1);
	xInterpolator .keyValue = new MFFloat (-20, -5, 10, 20);
	yInterpolator .keyValue = new MFFloat (-10, 5, -5, 10);
}

function set_touchTime (value, time)
{
	if (value - firstTime > doubleClickInterval)
	{
		firstTime = value;
		return;
	}

	doubleClickTime = time;

	if (pointIndex < 0 || pointIndex >= xInterpolator .keyValue .length)
		addPoint ();

	else
		removePoint ();
}

function set_hitPoint (value, time)
{
	hitPoint .x = value .x;
	hitPoint .y = value .y;

	if (! active)
		return;

	if (pointIndex < 0 || pointIndex >= xInterpolator .keyValue .length)
		return;

	xInterpolator .keyValue [pointIndex] = hitPoint .x + offset .x;
	yInterpolator .keyValue [pointIndex] = hitPoint .y + offset .y;
}

function set_active (value, time)
{
	if (! active)
		return;

	pointIndex = pick (hitPoint);
}

function pick (hitPoint)
{
	var pointIndex = -1;

	for (var i = 0, length = xInterpolator .keyValue .length; i < length; ++ i)
	{
		var point = new SFVec2f (xInterpolator .keyValue [i],
		                         yInterpolator .keyValue [i]);

		offset = point .subtract (hitPoint);

		if (offset .length () > pointSize)
			continue;

		pointIndex = i;
		break;
	}
	
	return pointIndex;
}

function addPoint ()
{
	var pointIndex = getAddPointIndex ()

	xInterpolator .keyValue .splice (pointIndex, 0, hitPoint .x);
	yInterpolator .keyValue .splice (pointIndex, 0, hitPoint .y);
	
	setXInterpolatorKey ();
}

function removePoint ()
{
	var pointIndex = getRemovePointIndex ()

	xInterpolator .keyValue .splice (pointIndex, 1);
	yInterpolator .keyValue .splice (pointIndex, 1);
	
	setXInterpolatorKey ();
}

function getAddPointIndex ()
{
	for (var i = 0, length = xInterpolator .keyValue .length; i < length; ++ i)
	{
		if (xInterpolator .keyValue [i] > hitPoint .x)
			break;
	}
	
	return i;
}

function getRemovePointIndex ()
{
	var
		first = xInterpolator .keyValue [0];
		last  = xInterpolator .keyValue [xInterpolator .keyValue .length - 1];

	if (hitPoint .x < first)
		return 0;

	if (hitPoint .x > last)
		return xInterpolator .keyValue .length - 1;

	return pick (hitPoint);
}

function setXInterpolatorKey ()
{
	if (xInterpolator .keyValue .length)
	{
		var
			first       = xInterpolator .keyValue [0];
			last        = xInterpolator .keyValue [xInterpolator .keyValue .length - 1];
			distance    = last - first,
			totalLength = 0,
			lengthSoFar = 0;

		for (var i = 1, length = xInterpolator .keyValue .length; i < length; ++ i)
		{
			var point0 = new SFVec2f (xInterpolator .keyValue [i - 1],
				                       yInterpolator .keyValue [i - 1]);
				                       
			var point1 = new SFVec2f (xInterpolator .keyValue [i],
				                       yInterpolator .keyValue [i]);
				                      
			totalLength += point1 .subtract (point0) .length ();
		}

		xInterpolator .key [0] = 0;

		for (var i = 1, length = xInterpolator .keyValue .length; i < length; ++ i)
		{
			var point0 = new SFVec2f (xInterpolator .keyValue [i - 1],
				                       yInterpolator .keyValue [i - 1]);
				                       
			var point1 = new SFVec2f (xInterpolator .keyValue [i],
				                       yInterpolator .keyValue [i]);
				                      
			lengthSoFar += point1 .subtract (point0) .length ();
			
			xInterpolator .key [i] = lengthSoFar / totalLength;
		}

		xInterpolator .key .length = length;
	}
	else
	{
		xInterpolator .key .length = 0;
	}
}
"
  directOutput TRUE
}

ROUTE XInterpolator.value_changed TO YInterpolator.set_fraction
ROUTE Timer.fraction_changed TO XInterpolator.set_fraction
ROUTE YInterpolator.value_changed TO TrailScript.set_y
ROUTE TrailScript.point_changed TO Trail.set_point
ROUTE Timer.cycleTime TO Trail.set_resetTime
ROUTE XInterpolator.keyValue_changed TO YInterpolator.set_key
ROUTE XInterpolator.keyValue_changed TO PointsScript.set_x
ROUTE YInterpolator.keyValue_changed TO PointsScript.set_y
ROUTE Touch.isActive TO PickingScript.set_active
ROUTE Touch.hitPoint_changed TO PickingScript.set_hitPoint
ROUTE Touch.touchTime TO PickingScript.set_touchTime
ROUTE PickingScript.doubleClickTime TO Trail.set_resetTime
