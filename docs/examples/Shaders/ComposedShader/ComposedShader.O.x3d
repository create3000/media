<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <component name='EnvironmentalEffects' level='3'/>
    <component name='Grouping' level='3'/>
    <component name='Shaders' level='1'/>
    <component name='Shape' level='4'/>
    <component name='Time' level='2'/>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Wed, 06 Dec 2017 01:50:04 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V4.5.0, http://titania.create3000.de'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/Shaders/ComposedShader/ComposedShader.O.x3d'/>
    <meta name='modified' content='Thu, 11 Apr 2019 08:13:32 GMT'/>
    <meta name='titania-add-metadata' content='true'/>
  </head>
  <Scene>
    <ProtoDeclare name='BumpShader'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFFloat' name='heightScale' value='1'/>
        <field accessType='inputOutput' type='SFInt32' name='bumpMapWidth' value='1024'/>
        <field accessType='inputOutput' type='SFInt32' name='bumpMapHeight' value='1024'/>
        <field accessType='inputOutput' type='SFNode' name='bumpMap'/>
      </ProtoInterface>
      <ProtoBody>
        <ComposedShader DEF='ComposedShader'
            language='GLSL'>
          <field accessType='inputOutput' type='SFFloat' name='heightScale'/>
          <field accessType='inputOutput' type='SFInt32' name='bumpMapWidth'/>
          <field accessType='inputOutput' type='SFInt32' name='bumpMapHeight'/>
          <field accessType='inputOutput' type='SFNode' name='bumpMap'/>
          <IS>
            <connect nodeField='heightScale' protoField='heightScale'/>
            <connect nodeField='bumpMapWidth' protoField='bumpMapWidth'/>
            <connect nodeField='bumpMapHeight' protoField='bumpMapHeight'/>
            <connect nodeField='bumpMap' protoField='bumpMap'/>
          </IS>
          <ShaderPart DEF='VertexShader'>
<![CDATA[data:x-shader/x-vertex,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform mat4 x3d_TextureMatrix [x3d_MaxTextures];
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

uniform float x3d_LinewidthScaleFactor;
uniform bool  x3d_Lighting;  // true if a X3DMaterialNode is attached, otherwise false

attribute vec4 x3d_Color;
attribute vec4 x3d_TexCoord0;
attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

void
main ()
{
	gl_PointSize = x3d_LinewidthScaleFactor;

	vec4 p = x3d_ModelViewMatrix * x3d_Vertex;

	vN = x3d_Normal;
	t  = x3d_TextureMatrix [0] * x3d_TexCoord0;
	C  = x3d_Color;
	v  = p .xyz;

	gl_Position = x3d_ProjectionMatrix * p;
}
]]>
          </ShaderPart>
          <ShaderPart DEF='FragmentShader'
              type='FRAGMENT'>
<![CDATA[data:x-shader/x-fragment,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform int x3d_GeometryType;

uniform int  x3d_NumClipPlanes;
uniform vec4 x3d_ClipPlane [x3d_MaxClipPlanes];

uniform float x3d_LinewidthScaleFactor;
uniform bool  x3d_Lighting;      // true if a X3DMaterialNode is attached, otherwise false
uniform bool  x3d_ColorMaterial; // true if a X3DColorNode is attached, otherwise false

uniform int x3d_NumLights;
uniform x3d_LightSourceParameters x3d_LightSource [x3d_MaxLights];
uniform bool x3d_SeparateBackColor;
uniform x3d_MaterialParameters x3d_FrontMaterial;
uniform x3d_MaterialParameters x3d_BackMaterial;

uniform int         x3d_TextureType [x3d_MaxTextures]; // true if a X3DTexture2DNode is attached, otherwise false
uniform sampler2D   x3d_Texture2D [x3d_MaxTextures];
uniform samplerCube x3d_CubeMapTexture [x3d_MaxTextures];

uniform x3d_FogParameters x3d_Fog;

uniform mat3 x3d_NormalMatrix;

uniform float     heightScale;
uniform int       bumpMapWidth;
uniform int       bumpMapHeight;
uniform sampler2D bumpMap;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

void
clip ()
{
	for (int i = 0; i < x3d_MaxClipPlanes; ++ i)
	{
		if (i == x3d_NumClipPlanes)
			break;

		if (dot (v, x3d_ClipPlane [i] .xyz) - x3d_ClipPlane [i] .w < 0.0)
			discard;
	}
}

vec3
getNormal (in vec3 N)
{
	vec2 texCoord = x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing ? vec2 (t) : vec2 (1.0 - t .s, t .t);
	vec2 s        = 1.0 / vec2 (bumpMapWidth, bumpMapHeight);
	vec3 g        = vec3 (0.0, 0.0, heightScale * texture2D (bumpMap, texCoord) .r);
	vec3 r        = vec3 (1.0, 0.0, heightScale * texture2D (bumpMap, texCoord + vec2 (s .x, 0)) .r);
	vec3 a        = vec3 (0.0, 1.0, heightScale * texture2D (bumpMap, texCoord + vec2 (0, s .y)) .r);

	vec3 n = cross (r - g, a - g);
	vec3 x = cross (vec3 (0.0, 1.0, 0.0), N);
	
	if (dot (x, x) == 0.0)
		x = vec3 (1.0, 0.0, 0.0);
	
	vec3 y = cross (N, x);

	n = normalize (n);
	x = normalize (x);
	y = normalize (y);

	return x3d_NormalMatrix * mat3 (x, y, N) * n;
}

vec4
getTextureColor ()
{
	if (x3d_TextureType [0] == x3d_TextureType2D)
	{
		if (x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing)
			return texture2D (x3d_Texture2D [0], vec2 (t));
		
		// If dimension is x3d_Geometry2D the texCoords must be flipped.
		return texture2D (x3d_Texture2D [0], vec2 (1.0 - t .s, t .t));
	}

	if (x3d_TextureType [0] == x3d_TextureTypeCubeMapTexture)
	{
		if (x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing)
			return textureCube (x3d_CubeMapTexture [0], vec3 (t));
		
		// If dimension is x3d_Geometry2D the texCoords must be flipped.
		return textureCube (x3d_CubeMapTexture [0], vec3 (1.0 - t .s, t .t, t .z));
	}

	return vec4 (1.0, 1.0, 1.0, 1.0);
}

float
getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)
{
	float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));
	
	if (spotAngle >= cutOffAngle)
		return 0.0;
	else if (spotAngle <= beamWidth)
		return 1.0;

	return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);
}

vec4
getMaterialColor (in x3d_MaterialParameters material)
{
	if (x3d_Lighting)
	{
		vec3  N  = getNormal (normalize (gl_FrontFacing ? vN : -vN));
		vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position
		float dV = length (v);

		// Calculate diffuseFactor & alpha

		vec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);
		float alpha         = 1.0 - material .transparency;

		if (x3d_ColorMaterial)
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				diffuseFactor  = T .rgb * C .rgb;
				alpha         *= T .a;
			}
			else
				diffuseFactor = C .rgb;

			alpha *= C .a;
		}
		else
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				diffuseFactor  = T .rgb * material .diffuseColor;
				alpha         *= T .a;
			}
			else
				diffuseFactor = material .diffuseColor;
		}

		vec3 ambientTerm = diffuseFactor * material .ambientIntensity;

		// Apply light sources

		vec3 finalColor = vec3 (0.0, 0.0, 0.0);

		for (int i = 0; i < x3d_MaxLights; ++ i)
		{
			if (i == x3d_NumLights)
				break;

			x3d_LightSourceParameters light = x3d_LightSource [i];

			vec3  vL = light .location - v;
			float dL = length (vL);
			bool  di = light .type == x3d_DirectionalLight;

			if (di || dL <= light .radius)
			{
				vec3 d = light .direction;
				vec3 c = light .attenuation;
				vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.
				vec3 H = normalize (L + V);             // Specular term

				float lightAngle     = dot (N, L);      // Angle between normal and light ray.
				vec3  diffuseTerm    = diffuseFactor * clamp (lightAngle, 0.0, 1.0);
				float specularFactor = material .shininess > 0.0 ? pow (max (dot (N, H), 0.0), material .shininess * 128.0) : 1.0;
				vec3  specularTerm   = material .specularColor * specularFactor;

				float attenuationFactor           = di ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);
				float spotFactor                  = light .type == x3d_SpotLight ? getSpotFactor (light .cutOffAngle, light .beamWidth, L, d) : 1.0;
				float attenuationSpotFactor       = attenuationFactor * spotFactor;
				vec3  ambientColor                = light .ambientIntensity * ambientTerm;
				vec3  ambientDiffuseSpecularColor = ambientColor + light .intensity * (diffuseTerm + specularTerm);

				finalColor += attenuationSpotFactor * (light .color * ambientDiffuseSpecularColor);
			}
		}

		finalColor += material .emissiveColor;

		return vec4 (finalColor, alpha);
	}
	else
	{
		vec4 finalColor = vec4 (1.0, 1.0, 1.0, 1.0);
	
		if (x3d_ColorMaterial)
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				finalColor = T * C;
			}
			else
				finalColor = C;
		}
		else
		{
			if (x3d_TextureType [0] != x3d_None)
				finalColor = getTextureColor ();
		}

		return finalColor;
	}
}

float
getFogInterpolant ()
{
	// Returns 0.0 for fog color and 1.0 for material color.

	if (x3d_Fog .type == x3d_None)
		return 1.0;

	if (x3d_Fog .visibilityRange <= 0.0)
		return 0.0;

	float dV = length (v);

	if (dV >= x3d_Fog .visibilityRange)
		return 0.0;

	if (x3d_Fog .type == x3d_LinearFog)
		return (x3d_Fog .visibilityRange - dV) / x3d_Fog .visibilityRange;

	if (x3d_Fog .type == x3d_ExponentialFog)
		return exp (-dV / (x3d_Fog .visibilityRange - dV));

	return 1.0;
}

vec3
getFogColor (vec3 color)
{
	return mix (x3d_Fog .color, color, getFogInterpolant ());
}

void
main ()
{
	clip ();

	bool frontColor = gl_FrontFacing || ! x3d_SeparateBackColor;

	gl_FragColor = frontColor ? getMaterialColor (x3d_FrontMaterial) : getMaterialColor (x3d_BackMaterial);

	gl_FragColor .rgb = getFogColor (gl_FragColor .rgb);
}
]]>
          </ShaderPart>
        </ComposedShader>
      </ProtoBody>
    </ProtoDeclare>
    <WorldInfo>
      <MetadataSet DEF='Titania'
          name='Titania'
          reference='http://titania.create3000.de'>
        <MetadataSet DEF='AngleGrid' containerField='value'
            name='AngleGrid'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='enabled' containerField='value'
              name='enabled'
              reference='http://titania.create3000.de'
              value='false'/>
        </MetadataSet>
        <MetadataSet DEF='Grid' containerField='value'
            name='Grid'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='enabled_1' containerField='value'
              name='enabled'
              reference='http://titania.create3000.de'
              value='false'/>
        </MetadataSet>
        <MetadataSet DEF='Selection' containerField='value'
            name='Selection'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='selectGeometry' containerField='value'
              name='selectGeometry'
              reference='http://titania.create3000.de'
              value='false'/>
          <MetadataSet DEF='nodes' containerField='value'
              name='nodes'
              reference='http://titania.create3000.de'>
            <!-- NULL -->
          </MetadataSet>
        </MetadataSet>
        <MetadataSet DEF='BrowserPanel' containerField='value'
            name='BrowserPanel'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='layerNumber' containerField='value'
              name='layerNumber'
              reference='http://titania.create3000.de'
              value='-1, 0, 0, 0, 0, -1, -1, -1'/>
          <MetadataString DEF='type_2' containerField='value'
              name='type'
              reference='http://titania.create3000.de'
              value='"TOP_VIEW", "MAIN_VIEW", "PERSPECTIVE_VIEW", "FRONT_VIEW"'/>
          <MetadataSet DEF='viewpoints' containerField='value'
              name='viewpoints'
              reference='http://titania.create3000.de'>
            <MetadataSet DEF='PerspectiveViewpoint' containerField='value'
                name='PerspectiveViewpoint'
                reference='http://titania.create3000.de'>
              <MetadataDouble DEF='position_3' containerField='value'
                  name='position'
                  reference='http://titania.create3000.de'
                  value='2.50254204784804, 1.99553258376803, 2.60930114090879'/>
              <MetadataDouble DEF='orientation_4' containerField='value'
                  name='orientation'
                  reference='http://titania.create3000.de'
                  value='-0.555409277260212, 0.816562463203809, 0.157309498822598, 0.900122795772183'/>
              <MetadataDouble DEF='centerOfRotation_5' containerField='value'
                  name='centerOfRotation'
                  reference='http://titania.create3000.de'
                  value='0, 0, 0.00671601295471191'/>
              <MetadataDouble DEF='fieldOfViewScale' containerField='value'
                  name='fieldOfViewScale'
                  reference='http://titania.create3000.de'
                  value='1'/>
            </MetadataSet>
            <MetadataSet DEF='TopViewpoint' containerField='value'
                name='TopViewpoint'
                reference='http://titania.create3000.de'>
              <MetadataDouble DEF='position_6' containerField='value'
                  name='position'
                  reference='http://titania.create3000.de'
                  value='0, 10000, 0'/>
              <MetadataDouble DEF='orientation_7' containerField='value'
                  name='orientation'
                  reference='http://titania.create3000.de'
                  value='-1, 0, 0, 1.5707963267949'/>
              <MetadataDouble DEF='centerOfRotation_8' containerField='value'
                  name='centerOfRotation'
                  reference='http://titania.create3000.de'
                  value='0, 0, 0'/>
              <MetadataDouble DEF='fieldOfViewScale_9' containerField='value'
                  name='fieldOfViewScale'
                  reference='http://titania.create3000.de'
                  value='1'/>
            </MetadataSet>
            <MetadataSet DEF='FrontViewpoint' containerField='value'
                name='FrontViewpoint'
                reference='http://titania.create3000.de'>
              <MetadataDouble DEF='position_10' containerField='value'
                  name='position'
                  reference='http://titania.create3000.de'
                  value='-0.209440725786676, -0.0669228569115239, 11.7158203125'/>
              <MetadataDouble DEF='orientation_11' containerField='value'
                  name='orientation'
                  reference='http://titania.create3000.de'
                  value='0, 0, 1, 0'/>
              <MetadataDouble DEF='centerOfRotation_12' containerField='value'
                  name='centerOfRotation'
                  reference='http://titania.create3000.de'
                  value='-0.209440725786676, -0.0669228569115239, 0.00671601295471191'/>
              <MetadataDouble DEF='fieldOfViewScale_13' containerField='value'
                  name='fieldOfViewScale'
                  reference='http://titania.create3000.de'
                  value='0.358841776847839'/>
            </MetadataSet>
          </MetadataSet>
        </MetadataSet>
        <MetadataSet DEF='Page' containerField='value'
            name='Page'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='activeView' containerField='value'
              name='activeView'
              reference='http://titania.create3000.de'
              value='1'/>
          <MetadataInteger DEF='multiView' containerField='value'
              name='multiView'
              reference='http://titania.create3000.de'
              value='0'/>
        </MetadataSet>
      </MetadataSet>
    </WorldInfo>
    <Background DEF='Gray'
        skyColor='0.2 0.2 0.2'/>
    <Viewpoint
        description='Initial View'
        position='0.0230918 1.93258 3.8192'
        orientation='0.999915173842092 -0.0126691707655475 -0.00302278554529849 5.81471712749516'
        centerOfRotation='-0.02 0 0'/>
    <Transform DEF='Box'>
      <Group DEF='Animation'>
        <MetadataSet DEF='Animation_14'
            name='Animation'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='duration' containerField='value'
              name='duration'
              reference='http://titania.create3000.de'
              value='120'/>
          <MetadataInteger DEF='frameRate' containerField='value'
              name='frameRate'
              reference='http://titania.create3000.de'
              value='10'/>
        </MetadataSet>
        <TimeSensor DEF='AnimationTimer'
            cycleInterval='12'
            loop='true'
            startTime='1512868952.01575'
            stopTime='1512868952.01575'/>
        <OrientationInterpolator DEF='BoxRotationInterpolator'
            key='0, 0.25, 0.5, 0.75, 1'
            keyValue='0 0 1 0, 0 -1 0 1.5707963267949, 0 -1 0 3.14159253438051, 0 1 0 1.57079644600419, 0 0 1 0'>
          <MetadataSet DEF='Interpolator'
              name='Interpolator'
              reference='http://titania.create3000.de'>
            <MetadataInteger DEF='key' containerField='value'
                name='key'
                reference='http://titania.create3000.de'
                value='0, 30, 60, 90, 120'/>
            <MetadataDouble DEF='keyValue' containerField='value'
                name='keyValue'
                reference='http://titania.create3000.de'
                value='0, 0, 1, 0, 0, -1, 0, 1.5707963267949, 0, -1, 0, 3.14159253438051, 0, 1, 0, 1.57079644600419, 0, 0, 1, 0'/>
            <MetadataString DEF='keyType' containerField='value'
                name='keyType'
                reference='http://titania.create3000.de'
                value='"LINEAR", "LINEAR", "LINEAR", "LINEAR", "LINEAR"'/>
            <MetadataInteger DEF='keySize' containerField='value'
                name='keySize'
                reference='http://titania.create3000.de'
                value='1'/>
          </MetadataSet>
        </OrientationInterpolator>
      </Group>
      <Shape>
        <Appearance>
          <Material/>
          <ImageTexture
              url='"diffuse.png"'
              repeatS='false'
              repeatT='false'/>
          <ProtoInstance name='BumpShader' containerField='shaders'>
            <fieldValue name='heightScale' value='-20'/>
            <fieldValue name='bumpMapWidth' value='256'/>
            <fieldValue name='bumpMapHeight' value='256'/>
            <fieldValue name='bumpMap'>
              <ImageTexture DEF='_15' containerField='bumpMap'
                  url='"depth.png"'
                  repeatS='false'
                  repeatT='false'/>
            </fieldValue>
          </ProtoInstance>
        </Appearance>
        <Box/>
      </Shape>
    </Transform>
    <ROUTE fromNode='AnimationTimer' fromField='fraction_changed' toNode='BoxRotationInterpolator' toField='set_fraction'/>
    <ROUTE fromNode='BoxRotationInterpolator' fromField='value_changed' toNode='Box' toField='set_rotation'/>
  </Scene>
</X3D>
