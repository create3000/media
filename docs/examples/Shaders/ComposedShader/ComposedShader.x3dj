{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Interchange",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "https://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "comment",
          "@content": "Rise and Shine"
        },
        {
          "@name": "created",
          "@content": "Wed, 06 Dec 2017 01:50:04 GMT"
        },
        {
          "@name": "creator",
          "@content": "Holger Seelig"
        },
        {
          "@name": "generator",
          "@content": "Sunrize X3D Editor V1.1.2, https://create3000.github.io/sunrize/"
        },
        {
          "@name": "generator",
          "@content": "x3d-tidy V2.1.18, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "modified",
          "@content": "Mon, 04 Aug 2025 11:21:12 GMT"
        }
      ],
      "component": [
        {
          "@name": "Shaders",
          "@level": 1
        }
      ]
    },
    "Scene": {
      "-children": [
        { "ProtoDeclare":
          {
            "@name": "BumpShader",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "heightScale",
                  "@value": 1
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFInt32",
                  "@name": "bumpMapWidth",
                  "@value": 1024
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFInt32",
                  "@name": "bumpMapHeight",
                  "@value": 1024
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFNode",
                  "@name": "bumpMap"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "ComposedShader":
                  {
                    "@DEF": "ComposedShader",
                    "@language": "GLSL",
                    "-parts": [
                      { "ShaderPart":
                        {
                          "@DEF": "VertexShader",
                          "#sourceCode": [
"data:x-shader/x-vertex,#version 300 es",
"",
"// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-",
"",
"precision highp float;",
"precision highp int;",
"",
"uniform mat4 x3d_TextureMatrix [x3d_MaxTextures];",
"uniform mat4 x3d_ProjectionMatrix;",
"uniform mat4 x3d_ModelViewMatrix;",
"uniform mat4 x3d_EyeMatrix;",
"",
"uniform float x3d_LinewidthScaleFactor;",
"",
"in vec4 x3d_Color;",
"in vec4 x3d_TexCoord0;",
"in vec3 x3d_Normal;",
"in vec4 x3d_Vertex;",
"",
"out vec4 C;  // color",
"out vec4 t;  // texCoord",
"out vec3 vN; // normalized normal vector at this point on geometry",
"out vec3 v;  // point on geometry",
"",
"void",
"main ()",
"{",
"\tgl_PointSize = x3d_LinewidthScaleFactor;",
"",
"\tvec4 p = x3d_EyeMatrix * x3d_ModelViewMatrix * x3d_Vertex;",
"",
"\tvN = x3d_Normal;",
"\tt  = x3d_TextureMatrix [0] * x3d_TexCoord0;",
"\tC  = x3d_Color;",
"\tv  = p .xyz;",
"",
"\tgl_Position = x3d_ProjectionMatrix * p;",
"}",
""
                          ]
                        }
                      },
                      { "ShaderPart":
                        {
                          "@DEF": "FragmentShader",
                          "@type": "FRAGMENT",
                          "#sourceCode": [
"data:x-shader/x-fragment,#version 300 es",
"",
"// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-",
"",
"precision highp float;",
"precision highp int;",
"",
"uniform x3d_LightSourceParameters x3d_LightSource [1];",
"uniform x3d_MaterialParameters x3d_Material;",
"",
"uniform sampler2D x3d_Texture2D [1];",
"",
"uniform mat3 x3d_NormalMatrix;",
"",
"uniform float     heightScale;",
"uniform int       bumpMapWidth;",
"uniform int       bumpMapHeight;",
"uniform sampler2D bumpMap;",
"",
"in vec4 C;  // color",
"in vec4 t;  // texCoord",
"in vec3 vN; // normalized normal vector at this point on geometry",
"in vec3 v;  // point on geometry",
"",
"out vec4 x3d_FragColor;",
"",
"vec3",
"getNormal (in vec3 N)",
"{",
"\tvec2 texCoord = vec2 (t);",
"\tvec2 s        = 1.0 / vec2 (bumpMapWidth, bumpMapHeight);",
"\tvec3 g        = vec3 (0.0, 0.0, heightScale * texture (bumpMap, texCoord) .r);",
"\tvec3 r        = vec3 (1.0, 0.0, heightScale * texture (bumpMap, texCoord + vec2 (s .x, 0)) .r);",
"\tvec3 a        = vec3 (0.0, 1.0, heightScale * texture (bumpMap, texCoord + vec2 (0, s .y)) .r);",
"",
"\tvec3 n = cross (r - g, a - g);",
"\tvec3 x = cross (vec3 (0.0, 1.0, 0.0), N);",
"",
"\tif (dot (x, x) == 0.0)",
"\t\tx = vec3 (1.0, 0.0, 0.0);",
"",
"\tvec3 y = cross (N, x);",
"",
"\tn = normalize (n);",
"\tx = normalize (x);",
"\ty = normalize (y);",
"",
"\treturn x3d_NormalMatrix * mat3 (x, y, N) * n;",
"}",
"",
"vec4",
"getTextureColor ()",
"{",
"  return texture (x3d_Texture2D [0], vec2 (t));",
"}",
"",
"float",
"getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)",
"{",
"\tfloat spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));",
"",
"\tif (spotAngle >= cutOffAngle)",
"\t\treturn 0.0;",
"\telse if (spotAngle <= beamWidth)",
"\t\treturn 1.0;",
"",
"\treturn (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);",
"}",
"",
"vec4",
"getMaterialColor (in x3d_MaterialParameters material)",
"{",
"  vec3  N  = getNormal (normalize (gl_FrontFacing ? vN : -vN));",
"  vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position",
"  float dV = length (v);",
"",
"  // Calculate diffuseFactor & alpha",
"",
"  vec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);",
"  float alpha         = 1.0 - material .transparency;",
"",
"  vec4 T = getTextureColor ();",
"",
"  diffuseFactor  = T .rgb * material .diffuseColor;",
"  alpha         *= T .a;",
"",
"  vec3 ambientTerm = diffuseFactor * material .ambientIntensity;",
"",
"  // Apply light sources",
"",
"  vec3 finalColor = vec3 (0.0, 0.0, 0.0);",
"",
"  for (int i = 0; i < 1; ++ i)",
"  {",
"    x3d_LightSourceParameters light = x3d_LightSource [i];",
"",
"    vec3  vL = light .location - v;",
"    float dL = length (vL);",
"    bool  di = light .type == x3d_DirectionalLight;",
"",
"    if (di || dL <= light .radius)",
"    {",
"      vec3 d = light .direction;",
"      vec3 c = light .attenuation;",
"      vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.",
"      vec3 H = normalize (L + V);             // Specular term",
"",
"      float lightAngle     = dot (N, L);      // Angle between normal and light ray.",
"      vec3  diffuseTerm    = diffuseFactor * clamp (lightAngle, 0.0, 1.0);",
"      float specularFactor = material .shininess > 0.0 ? pow (max (dot (N, H), 0.0), material .shininess * 128.0) : 1.0;",
"      vec3  specularTerm   = material .specularColor * specularFactor;",
"",
"      float attenuationFactor           = di ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);",
"      float spotFactor                  = light .type == x3d_SpotLight ? getSpotFactor (light .cutOffAngle, light .beamWidth, L, d) : 1.0;",
"      float attenuationSpotFactor       = attenuationFactor * spotFactor;",
"      vec3  ambientColor                = light .ambientIntensity * ambientTerm;",
"      vec3  ambientDiffuseSpecularColor = ambientColor + light .intensity * (diffuseTerm + specularTerm);",
"",
"      finalColor += attenuationSpotFactor * (light .color * ambientDiffuseSpecularColor);",
"    }",
"  }",
"",
"  finalColor += material .emissiveColor;",
"",
"  return vec4 (finalColor, alpha);",
"}",
"",
"void",
"main ()",
"{",
"\tx3d_FragColor = getMaterialColor (x3d_Material);",
"}",
""
                          ]
                        }
                      }
                    ],
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "heightScale"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFInt32",
                        "@name": "bumpMapWidth"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFInt32",
                        "@name": "bumpMapHeight"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFNode",
                        "@name": "bumpMap"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "heightScale",
                          "@protoField": "heightScale"
                        },
                        {
                          "@nodeField": "bumpMapWidth",
                          "@protoField": "bumpMapWidth"
                        },
                        {
                          "@nodeField": "bumpMapHeight",
                          "@protoField": "bumpMapHeight"
                        },
                        {
                          "@nodeField": "bumpMap",
                          "@protoField": "bumpMap"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        { "Background":
          {
            "@DEF": "Gray",
            "@skyColor": [ 0.2, 0.2, 0.2 ]
          }
        },
        { "Viewpoint":
          {
            "@description": "Initial View",
            "@position": [ 0.0230918, 1.93258, 3.8192 ],
            "@orientation": [ 0.99991517384209, -0.012669170765548, -0.0030227855452985, 5.8147171274952 ],
            "@centerOfRotation": [ -0.02, 0, 0 ]
          }
        },
        { "Transform":
          {
            "@DEF": "Box",
            "@rotation": [ 0, -1, 0, 2.16207022523273 ],
            "-children": [
              { "Group":
                {
                  "@DEF": "Animation",
                  "-children": [
                    { "TimeSensor":
                      {
                        "@DEF": "AnimationTimer",
                        "@cycleInterval": 12,
                        "@loop": true,
                        "@startTime": 1512868952.01575,
                        "@stopTime": 1512868952.01575
                      }
                    },
                    { "OrientationInterpolator":
                      {
                        "@DEF": "BoxRotationInterpolator",
                        "@key": [ 0, 0.25, 0.5, 0.75, 1 ],
                        "@keyValue": [ 0, 0, 1, 0, 0, -1, 0, 1.5707963267949, 0, -1, 0, 3.1415925343805, 0, 1, 0, 1.5707964460042, 0, 0, 1, 0 ]
                      }
                    }
                  ]
                }
              },
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "-material": { "Material":
                        {
                        }
                      },
                      "-texture": { "ImageTexture":
                        {
                          "@url": [ "diffuse.png" ],
                          "@repeatS": false,
                          "@repeatT": false
                        }
                      },
                      "-shaders": [
                        { "ProtoInstance":
                          {
                            "@name": "BumpShader",
                            "fieldValue": [
                              {
                                "@name": "heightScale",
                                "@value": -20
                              },
                              {
                                "@name": "bumpMapWidth",
                                "@value": 256
                              },
                              {
                                "@name": "bumpMapHeight",
                                "@value": 256
                              },
                              {
                                "@name": "bumpMap",
                                "-children": [
                                  { "ImageTexture":
                                    {
                                      "@DEF": "_1",
                                      "@url": [ "depth.png" ],
                                      "@repeatS": false,
                                      "@repeatT": false
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "-geometry": { "Box":
                    {
                    }
                  }
                }
              }
            ]
          }
        },
        { "ROUTE":
          {
            "@fromNode": "AnimationTimer",
            "@fromField": "fraction_changed",
            "@toNode": "BoxRotationInterpolator",
            "@toField": "set_fraction"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "BoxRotationInterpolator",
            "@fromField": "value_changed",
            "@toNode": "Box",
            "@toField": "set_rotation"
          }
        }
      ]
    }
  }
}
