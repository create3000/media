#X3D V3.3 utf8 Titania V4.5.0

PROFILE Immersive

COMPONENT EnvironmentalEffects : 3
COMPONENT Grouping : 3
COMPONENT Shaders : 1
COMPONENT Shape : 4
COMPONENT Time : 2

META "comment" "World of Titania"
META "created" "Wed, 06 Dec 2017 01:50:04 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.5.0, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Sunrise/src/drive/user/test/components/Shaders/ComposedShader/ComposedShader.O.x3d"
META "modified" "Thu, 11 Apr 2019 08:13:32 GMT"
META "titania-add-metadata" "true"

PROTO BumpShader [
  inputOutput SFFloat heightScale 1
  inputOutput SFInt32 bumpMapWidth 1024
  inputOutput SFInt32 bumpMapHeight 1024
  inputOutput SFNode  bumpMap NULL
]
{
  DEF ComposedShader ComposedShader {
    inputOutput SFFloat heightScale IS heightScale
    inputOutput SFInt32 bumpMapWidth IS bumpMapWidth
    inputOutput SFInt32 bumpMapHeight IS bumpMapHeight
    inputOutput SFNode  bumpMap IS bumpMap

    language "GLSL"
    parts [
      DEF VertexShader ShaderPart {
        url "data:x-shader/x-vertex,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform mat4 x3d_TextureMatrix [x3d_MaxTextures];
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

uniform float x3d_LinewidthScaleFactor;
uniform bool  x3d_Lighting;  // true if a X3DMaterialNode is attached, otherwise false

attribute vec4 x3d_Color;
attribute vec4 x3d_TexCoord0;
attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

void
main ()
{
	gl_PointSize = x3d_LinewidthScaleFactor;

	vec4 p = x3d_ModelViewMatrix * x3d_Vertex;

	vN = x3d_Normal;
	t  = x3d_TextureMatrix [0] * x3d_TexCoord0;
	C  = x3d_Color;
	v  = p .xyz;

	gl_Position = x3d_ProjectionMatrix * p;
}
"
      }
      DEF FragmentShader ShaderPart {
        type "FRAGMENT"
        url "data:x-shader/x-fragment,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp int;
#else
precision mediump float;
precision mediump int;
#endif

uniform int x3d_GeometryType;

uniform int  x3d_NumClipPlanes;
uniform vec4 x3d_ClipPlane [x3d_MaxClipPlanes];

uniform float x3d_LinewidthScaleFactor;
uniform bool  x3d_Lighting;      // true if a X3DMaterialNode is attached, otherwise false
uniform bool  x3d_ColorMaterial; // true if a X3DColorNode is attached, otherwise false

uniform int x3d_NumLights;
uniform x3d_LightSourceParameters x3d_LightSource [x3d_MaxLights];
uniform bool x3d_SeparateBackColor;
uniform x3d_MaterialParameters x3d_FrontMaterial;
uniform x3d_MaterialParameters x3d_BackMaterial;

uniform int         x3d_TextureType [x3d_MaxTextures]; // true if a X3DTexture2DNode is attached, otherwise false
uniform sampler2D   x3d_Texture2D [x3d_MaxTextures];
uniform samplerCube x3d_CubeMapTexture [x3d_MaxTextures];

uniform x3d_FogParameters x3d_Fog;

uniform mat3 x3d_NormalMatrix;

uniform float     heightScale;
uniform int       bumpMapWidth;
uniform int       bumpMapHeight;
uniform sampler2D bumpMap;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

void
clip ()
{
	for (int i = 0; i < x3d_MaxClipPlanes; ++ i)
	{
		if (i == x3d_NumClipPlanes)
			break;

		if (dot (v, x3d_ClipPlane [i] .xyz) - x3d_ClipPlane [i] .w < 0.0)
			discard;
	}
}

vec3
getNormal (in vec3 N)
{
	vec2 texCoord = x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing ? vec2 (t) : vec2 (1.0 - t .s, t .t);
	vec2 s        = 1.0 / vec2 (bumpMapWidth, bumpMapHeight);
	vec3 g        = vec3 (0.0, 0.0, heightScale * texture2D (bumpMap, texCoord) .r);
	vec3 r        = vec3 (1.0, 0.0, heightScale * texture2D (bumpMap, texCoord + vec2 (s .x, 0)) .r);
	vec3 a        = vec3 (0.0, 1.0, heightScale * texture2D (bumpMap, texCoord + vec2 (0, s .y)) .r);

	vec3 n = cross (r - g, a - g);
	vec3 x = cross (vec3 (0.0, 1.0, 0.0), N);
	
	if (dot (x, x) == 0.0)
		x = vec3 (1.0, 0.0, 0.0);
	
	vec3 y = cross (N, x);

	n = normalize (n);
	x = normalize (x);
	y = normalize (y);

	return x3d_NormalMatrix * mat3 (x, y, N) * n;
}

vec4
getTextureColor ()
{
	if (x3d_TextureType [0] == x3d_TextureType2D)
	{
		if (x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing)
			return texture2D (x3d_Texture2D [0], vec2 (t));
		
		// If dimension is x3d_Geometry2D the texCoords must be flipped.
		return texture2D (x3d_Texture2D [0], vec2 (1.0 - t .s, t .t));
	}

	if (x3d_TextureType [0] == x3d_TextureTypeCubeMapTexture)
	{
		if (x3d_GeometryType == x3d_Geometry3D || gl_FrontFacing)
			return textureCube (x3d_CubeMapTexture [0], vec3 (t));
		
		// If dimension is x3d_Geometry2D the texCoords must be flipped.
		return textureCube (x3d_CubeMapTexture [0], vec3 (1.0 - t .s, t .t, t .z));
	}

	return vec4 (1.0, 1.0, 1.0, 1.0);
}

float
getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)
{
	float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));
	
	if (spotAngle >= cutOffAngle)
		return 0.0;
	else if (spotAngle <= beamWidth)
		return 1.0;

	return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);
}

vec4
getMaterialColor (in x3d_MaterialParameters material)
{
	if (x3d_Lighting)
	{
		vec3  N  = getNormal (normalize (gl_FrontFacing ? vN : -vN));
		vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position
		float dV = length (v);

		// Calculate diffuseFactor & alpha

		vec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);
		float alpha         = 1.0 - material .transparency;

		if (x3d_ColorMaterial)
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				diffuseFactor  = T .rgb * C .rgb;
				alpha         *= T .a;
			}
			else
				diffuseFactor = C .rgb;

			alpha *= C .a;
		}
		else
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				diffuseFactor  = T .rgb * material .diffuseColor;
				alpha         *= T .a;
			}
			else
				diffuseFactor = material .diffuseColor;
		}

		vec3 ambientTerm = diffuseFactor * material .ambientIntensity;

		// Apply light sources

		vec3 finalColor = vec3 (0.0, 0.0, 0.0);

		for (int i = 0; i < x3d_MaxLights; ++ i)
		{
			if (i == x3d_NumLights)
				break;

			x3d_LightSourceParameters light = x3d_LightSource [i];

			vec3  vL = light .location - v;
			float dL = length (vL);
			bool  di = light .type == x3d_DirectionalLight;

			if (di || dL <= light .radius)
			{
				vec3 d = light .direction;
				vec3 c = light .attenuation;
				vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.
				vec3 H = normalize (L + V);             // Specular term

				float lightAngle     = dot (N, L);      // Angle between normal and light ray.
				vec3  diffuseTerm    = diffuseFactor * clamp (lightAngle, 0.0, 1.0);
				float specularFactor = material .shininess > 0.0 ? pow (max (dot (N, H), 0.0), material .shininess * 128.0) : 1.0;
				vec3  specularTerm   = material .specularColor * specularFactor;

				float attenuationFactor           = di ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);
				float spotFactor                  = light .type == x3d_SpotLight ? getSpotFactor (light .cutOffAngle, light .beamWidth, L, d) : 1.0;
				float attenuationSpotFactor       = attenuationFactor * spotFactor;
				vec3  ambientColor                = light .ambientIntensity * ambientTerm;
				vec3  ambientDiffuseSpecularColor = ambientColor + light .intensity * (diffuseTerm + specularTerm);

				finalColor += attenuationSpotFactor * (light .color * ambientDiffuseSpecularColor);
			}
		}

		finalColor += material .emissiveColor;

		return vec4 (finalColor, alpha);
	}
	else
	{
		vec4 finalColor = vec4 (1.0, 1.0, 1.0, 1.0);
	
		if (x3d_ColorMaterial)
		{
			if (x3d_TextureType [0] != x3d_None)
			{
				vec4 T = getTextureColor ();

				finalColor = T * C;
			}
			else
				finalColor = C;
		}
		else
		{
			if (x3d_TextureType [0] != x3d_None)
				finalColor = getTextureColor ();
		}

		return finalColor;
	}
}

float
getFogInterpolant ()
{
	// Returns 0.0 for fog color and 1.0 for material color.

	if (x3d_Fog .type == x3d_None)
		return 1.0;

	if (x3d_Fog .visibilityRange <= 0.0)
		return 0.0;

	float dV = length (v);

	if (dV >= x3d_Fog .visibilityRange)
		return 0.0;

	if (x3d_Fog .type == x3d_LinearFog)
		return (x3d_Fog .visibilityRange - dV) / x3d_Fog .visibilityRange;

	if (x3d_Fog .type == x3d_ExponentialFog)
		return exp (-dV / (x3d_Fog .visibilityRange - dV));

	return 1.0;
}

vec3
getFogColor (vec3 color)
{
	return mix (x3d_Fog .color, color, getFogInterpolant ());
}

void
main ()
{
	clip ();

	bool frontColor = gl_FrontFacing || ! x3d_SeparateBackColor;

	gl_FragColor = frontColor ? getMaterialColor (x3d_FrontMaterial) : getMaterialColor (x3d_BackMaterial);

	gl_FragColor .rgb = getFogColor (gl_FragColor .rgb);
}
"
      }
    ]
  }
}

WorldInfo {
}

DEF Gray Background {
  skyColor 0.2 0.2 0.2
}

Viewpoint {
  description "Initial View"
  position 0.0230918 1.93258 3.8192
  orientation 0.999915173842092 -0.0126691707655475 -0.00302278554529849 5.81471712749516
  centerOfRotation -0.02 0 0
}

DEF Box Transform {
  children [
    DEF Animation Group {
      children [
        DEF AnimationTimer TimeSensor {
          cycleInterval 12
          loop TRUE
          startTime 1512868952.01575
          stopTime 1512868952.01575
        }
        DEF BoxRotationInterpolator OrientationInterpolator {
          key [ 0, 0.25, 0.5, 0.75, 1 ]
          keyValue [ 0 0 1 0, 0 -1 0 1.5707963267949, 0 -1 0 3.14159253438051, 0 1 0 1.57079644600419, 0 0 1 0 ]
        }
      ]
    }
    Shape {
      appearance Appearance {
        material Material { }
        texture ImageTexture {
          url "diffuse.png"
          repeatS FALSE
          repeatT FALSE
        }
        shaders BumpShader {
          heightScale -20
          bumpMapWidth 256
          bumpMapHeight 256
          bumpMap DEF _1 ImageTexture {
            url "depth.png"
            repeatS FALSE
            repeatT FALSE
          }
        }
      }
      geometry Box { }
    }
  ]
}

ROUTE AnimationTimer.fraction_changed TO BoxRotationInterpolator.set_fraction
ROUTE BoxRotationInterpolator.value_changed TO Box.set_rotation
