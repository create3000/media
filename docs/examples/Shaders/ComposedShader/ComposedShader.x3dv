#X3D V4.0 utf8 X_ITE V8.12.5

PROFILE Interchange

COMPONENT Shaders : 1

META "comment" "Rise and Shine"
META "created" "Wed, 06 Dec 2017 01:50:04 GMT"
META "creator" "Holger Seelig"
META "generator" "x3d-tidy V1.0.97, https://www.npmjs.com/package/x3d-tidy"
META "identifier" "file:///Users/holger/Desktop/X_ITE/media/docs/examples/Shaders/ComposedShader/ComposedShader.O.x3d"
META "modified" "Tue, 17 Oct 2023 21:24:33 GMT"
META "titania-add-metadata" "true"

PROTO BumpShader [
  inputOutput SFFloat heightScale 1
  inputOutput SFInt32 bumpMapWidth 1024
  inputOutput SFInt32 bumpMapHeight 1024
  inputOutput SFNode  bumpMap NULL
]
{
  DEF ComposedShader ComposedShader {
    inputOutput SFFloat heightScale IS heightScale
    inputOutput SFInt32 bumpMapWidth IS bumpMapWidth
    inputOutput SFInt32 bumpMapHeight IS bumpMapHeight
    inputOutput SFNode  bumpMap IS bumpMap

    language "GLSL"
    parts [
      DEF VertexShader ShaderPart {
        url "data:x-shader/x-vertex,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

precision highp float;
precision highp int;

uniform mat4 x3d_TextureTransformMatrix [x3d_MaxTextures];
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

uniform float x3d_LinewidthScaleFactor;

attribute vec4 x3d_Color;
attribute vec4 x3d_TexCoord0;
attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

void
main ()
{
	gl_PointSize = x3d_LinewidthScaleFactor;

	vec4 p = x3d_ModelViewMatrix * x3d_Vertex;

	vN = x3d_Normal;
	t  = x3d_TextureTransformMatrix [0] * x3d_TexCoord0;
	C  = x3d_Color;
	v  = p .xyz;

	gl_Position = x3d_ProjectionMatrix * p;
}
"
      }
      DEF FragmentShader ShaderPart {
        type "FRAGMENT"
        url "data:x-shader/x-fragment,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

precision highp float;
precision highp int;

uniform x3d_LightSourceParameters x3d_LightSource [1];
uniform x3d_MaterialParameters x3d_Material;

uniform sampler2D x3d_Texture2D [1];

uniform mat3 x3d_NormalMatrix;

uniform float     heightScale;
uniform int       bumpMapWidth;
uniform int       bumpMapHeight;
uniform sampler2D bumpMap;

varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

vec3
getNormal (in vec3 N)
{
	vec2 texCoord = vec2 (t);
	vec2 s        = 1.0 / vec2 (bumpMapWidth, bumpMapHeight);
	vec3 g        = vec3 (0.0, 0.0, heightScale * texture2D (bumpMap, texCoord) .r);
	vec3 r        = vec3 (1.0, 0.0, heightScale * texture2D (bumpMap, texCoord + vec2 (s .x, 0)) .r);
	vec3 a        = vec3 (0.0, 1.0, heightScale * texture2D (bumpMap, texCoord + vec2 (0, s .y)) .r);

	vec3 n = cross (r - g, a - g);
	vec3 x = cross (vec3 (0.0, 1.0, 0.0), N);

	if (dot (x, x) == 0.0)
		x = vec3 (1.0, 0.0, 0.0);

	vec3 y = cross (N, x);

	n = normalize (n);
	x = normalize (x);
	y = normalize (y);

	return x3d_NormalMatrix * mat3 (x, y, N) * n;
}

vec4
getTextureColor ()
{
  return texture2D (x3d_Texture2D [0], vec2 (t));
}

float
getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)
{
	float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));

	if (spotAngle >= cutOffAngle)
		return 0.0;
	else if (spotAngle <= beamWidth)
		return 1.0;

	return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);
}

vec4
getMaterialColor (in x3d_MaterialParameters material)
{
  vec3  N  = getNormal (normalize (gl_FrontFacing ? vN : -vN));
  vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position
  float dV = length (v);

  // Calculate diffuseFactor & alpha

  vec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);
  float alpha         = 1.0 - material .transparency;

  vec4 T = getTextureColor ();

  diffuseFactor  = T .rgb * material .diffuseColor;
  alpha         *= T .a;

  vec3 ambientTerm = diffuseFactor * material .ambientIntensity;

  // Apply light sources

  vec3 finalColor = vec3 (0.0, 0.0, 0.0);

  for (int i = 0; i < 1; ++ i)
  {
    x3d_LightSourceParameters light = x3d_LightSource [i];

    vec3  vL = light .location - v;
    float dL = length (vL);
    bool  di = light .type == x3d_DirectionalLight;

    if (di || dL <= light .radius)
    {
      vec3 d = light .direction;
      vec3 c = light .attenuation;
      vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.
      vec3 H = normalize (L + V);             // Specular term

      float lightAngle     = dot (N, L);      // Angle between normal and light ray.
      vec3  diffuseTerm    = diffuseFactor * clamp (lightAngle, 0.0, 1.0);
      float specularFactor = material .shininess > 0.0 ? pow (max (dot (N, H), 0.0), material .shininess * 128.0) : 1.0;
      vec3  specularTerm   = material .specularColor * specularFactor;

      float attenuationFactor           = di ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);
      float spotFactor                  = light .type == x3d_SpotLight ? getSpotFactor (light .cutOffAngle, light .beamWidth, L, d) : 1.0;
      float attenuationSpotFactor       = attenuationFactor * spotFactor;
      vec3  ambientColor                = light .ambientIntensity * ambientTerm;
      vec3  ambientDiffuseSpecularColor = ambientColor + light .intensity * (diffuseTerm + specularTerm);

      finalColor += attenuationSpotFactor * (light .color * ambientDiffuseSpecularColor);
    }
  }

  finalColor += material .emissiveColor;

  return vec4 (finalColor, alpha);
}

void
main ()
{
	gl_FragColor = getMaterialColor (x3d_Material);
}
"
      }
    ]
  }
}

DEF Gray Background {
  skyColor 0.2 0.2 0.2
}

Viewpoint {
  description "Initial View"
  position 0.0230918 1.93258 3.8192
  orientation 0.99991517384209 -0.012669170765548 -0.0030227855452985 5.8147171274952
  centerOfRotation -0.02 0 0
}

DEF Box Transform {
  rotation 0 -1 0 0.910145576770798
  children [
    DEF Animation Group {
      children [
        DEF AnimationTimer TimeSensor {
          cycleInterval 12
          loop TRUE
          startTime 1512868952.01575
          stopTime 1512868952.01575
        }
        DEF BoxRotationInterpolator OrientationInterpolator {
          key [ 0, 0.25, 0.5, 0.75, 1 ]
          keyValue [ 0 0 1 0, 0 -1 0 1.5707963267949, 0 -1 0 3.1415925343805, 0 1 0 1.5707964460042, 0 0 1 0 ]
        }
      ]
    }
    Shape {
      appearance Appearance {
        material Material { }
        texture ImageTexture {
          url "diffuse.png"
          repeatS FALSE
          repeatT FALSE
        }
        shaders BumpShader {
          heightScale -20
          bumpMapWidth 256
          bumpMapHeight 256
          bumpMap DEF _1 ImageTexture {
            url "depth.png"
            repeatS FALSE
            repeatT FALSE
          }
        }
      }
      geometry Box { }
    }
  ]
}

ROUTE AnimationTimer.fraction_changed TO BoxRotationInterpolator.set_fraction
ROUTE BoxRotationInterpolator.value_changed TO Box.set_rotation
