#X3D V4.0 utf8 X_ITE V11.2.0

PROFILE Interchange

COMPONENT Geometry2D : 2
COMPONENT Layering : 1
COMPONENT Layout : 2
COMPONENT Shaders : 1

META "comment" "Rise and Shine"
META "created" "Sun, 10 Dec 2017 16:14:16 GMT"
META "creator" "Holger Seelig"
META "generator" "Sunrize X3D Editor V1.1.2, https://create3000.github.io/sunrize/"
META "generator" "x3d-tidy V2.0.20, https://www.npmjs.com/package/x3d-tidy"
META "modified" "Fri, 21 Feb 2025 11:25:52 GMT"

WorldInfo { }

LayerSet {
  order [ 0, 1 ]
  layers LayoutLayer {
    layout Layout { }
    children [
      DEF Timer TimeSensor {
        cycleInterval 10000
        loop TRUE
      }
      DEF Interpolator ScalarInterpolator {
        key [ 0, 1 ]
        keyValue [ 0, 10000 ]
      }
      DEF Rectangle2D Transform {
        scale 0.5 0.5 0.5
        children Shape {
          appearance Appearance {
            shaders DEF ComposedShader ComposedShader {
              inputOutput SFFloat time 7152.246

              language "GLSL"
              parts [
                DEF VertexShader ShaderPart {
                  url "data:x-shader/x-vertex,

precision highp float;
precision highp int;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat4 x3d_EyeMatrix;

attribute vec4 x3d_Vertex;

void
main ()
{
	gl_Position = x3d_ProjectionMatrix * x3d_EyeMatrix * x3d_ModelViewMatrix * x3d_Vertex;
}
"
                }
                DEF FragmentShader ShaderPart {
                  type "FRAGMENT"
                  url "data:x-shader/x-fragment,

precision highp float;
precision highp int;

uniform float time;

uniform ivec4 x3d_Viewport;

float
cubefield (vec3 pos)
{
	vec3  cellpos = pos - floor (pos);
	vec3  signvec = 2.0 * step (0.5, cellpos) - 1.0;
	float sign    = signvec .x * signvec .y * signvec .z;
	vec3  subpos  = abs (abs (cellpos - 0.5) - 0.25);

	return sign * (max (max (subpos .x, subpos .y), subpos .z) - 0.25);
}

float
sphere (vec3 pos, vec3 center, float r)
{
	return length (pos - center) - r;
}

float
torus (vec3 pos, float r, float R)
{
	return length (vec2 (length (pos .xy) -R, pos .z)) - r;
}

float
distfunc (vec3 pos)
{
	float sin_a = sin (time);
	float cos_a = cos (time);

	vec3 rotpos = mat3 (
		vec3 (cos(time * 1.63), 0, -sin (time * 1.63)),
		vec3 (0.0, 1.0, 0.0),
		vec3 (sin (time * 1.63), 0, cos (time * 1.63))
	) * mat3 (
		vec3 (cos( time * 1.2), -sin (time * 1.2), 0),
		vec3 (sin (time * 1.2), cos( time * 1.2), 0),
		vec3 (0.0, 0.0, 1.0)
	) * (pos - vec3 (sin_a, cos_a, -4.0));

	return mix (
		cubefield (pos),
		torus (rotpos, 0.5, 1.0),
		(sin (time / 2.0) + 1.5) / 2.5
	);
}

void
main ()
{
	vec2 size = vec2 (x3d_Viewport [2], x3d_Viewport [3]);

	float x = (2.0 * gl_FragCoord .x - size .x) / max (size .x, size .y);
	float y = (2.0 * gl_FragCoord .y - size .y) / max (size .x, size .y);

	vec3 ray_dir  = normalize (vec3 (x, y, -1.0 /*+sqrt(x*x+y*y)*/));
	vec3 ray_orig = vec3 (0.0, 0.0, 0.0);

	float offs = 0.0;
	float i    = 0.0;

	for (float j = 0.0; j < 64.0; j++)
	{
		float dist = distfunc (ray_orig + ray_dir * offs);

		offs += dist;
		i     = j;

		if (abs (dist) < 0.00001)
			break;
		else if (offs > 100.0)
			break;
	}

	float c = i / 64.0;

	gl_FragColor = vec4 (c * c * c, c * c, c, 1.0);
}

"
                }
              ]
            }
          }
          geometry Rectangle2D { }
        }
      }
    ]
  }
}

ROUTE Timer.fraction_changed TO Interpolator.set_fraction
ROUTE Interpolator.value_changed TO ComposedShader.set_time
