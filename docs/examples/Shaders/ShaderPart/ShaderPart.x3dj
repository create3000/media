{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Interchange",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "https://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "comment",
          "@content": "Rise and Shine"
        },
        {
          "@name": "created",
          "@content": "Sun, 10 Dec 2017 16:14:16 GMT"
        },
        {
          "@name": "creator",
          "@content": "Holger Seelig"
        },
        {
          "@name": "generator",
          "@content": "Sunrize X3D Editor V1.1.2, https://create3000.github.io/sunrize/"
        },
        {
          "@name": "generator",
          "@content": "x3d-tidy V2.0.20, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "modified",
          "@content": "Fri, 21 Feb 2025 11:25:52 GMT"
        }
      ],
      "component": [
        {
          "@name": "Geometry2D",
          "@level": 2
        },
        {
          "@name": "Layering",
          "@level": 1
        },
        {
          "@name": "Layout",
          "@level": 2
        },
        {
          "@name": "Shaders",
          "@level": 1
        }
      ]
    },
    "Scene": {
      "-children": [
        { "WorldInfo":
          {
          }
        },
        { "LayerSet":
          {
            "@order": [ 0, 1 ],
            "-layers": [
              { "LayoutLayer":
                {
                  "-layout": { "Layout":
                    {
                    }
                  },
                  "-children": [
                    { "TimeSensor":
                      {
                        "@DEF": "Timer",
                        "@cycleInterval": 10000,
                        "@loop": true
                      }
                    },
                    { "ScalarInterpolator":
                      {
                        "@DEF": "Interpolator",
                        "@key": [ 0, 1 ],
                        "@keyValue": [ 0, 10000 ]
                      }
                    },
                    { "Transform":
                      {
                        "@DEF": "Rectangle2D",
                        "@scale": [ 0.5, 0.5, 0.5 ],
                        "-children": [
                          { "Shape":
                            {
                              "-appearance": { "Appearance":
                                {
                                  "-shaders": [
                                    { "ComposedShader":
                                      {
                                        "@DEF": "ComposedShader",
                                        "@language": "GLSL",
                                        "-parts": [
                                          { "ShaderPart":
                                            {
                                              "@DEF": "VertexShader",
                                              "#sourceCode": [
"data:x-shader/x-vertex,",
"",
"precision highp float;",
"precision highp int;",
"",
"uniform mat4 x3d_ProjectionMatrix;",
"uniform mat4 x3d_ModelViewMatrix;",
"uniform mat4 x3d_EyeMatrix;",
"",
"attribute vec4 x3d_Vertex;",
"",
"void",
"main ()",
"{",
"\tgl_Position = x3d_ProjectionMatrix * x3d_EyeMatrix * x3d_ModelViewMatrix * x3d_Vertex;",
"}",
""
                                              ]
                                            }
                                          },
                                          { "ShaderPart":
                                            {
                                              "@DEF": "FragmentShader",
                                              "@type": "FRAGMENT",
                                              "#sourceCode": [
"data:x-shader/x-fragment,",
"",
"precision highp float;",
"precision highp int;",
"",
"uniform float time;",
"",
"uniform ivec4 x3d_Viewport;",
"",
"float",
"cubefield (vec3 pos)",
"{",
"\tvec3  cellpos = pos - floor (pos);",
"\tvec3  signvec = 2.0 * step (0.5, cellpos) - 1.0;",
"\tfloat sign    = signvec .x * signvec .y * signvec .z;",
"\tvec3  subpos  = abs (abs (cellpos - 0.5) - 0.25);",
"",
"\treturn sign * (max (max (subpos .x, subpos .y), subpos .z) - 0.25);",
"}",
"",
"float",
"sphere (vec3 pos, vec3 center, float r)",
"{",
"\treturn length (pos - center) - r;",
"}",
"",
"float",
"torus (vec3 pos, float r, float R)",
"{",
"\treturn length (vec2 (length (pos .xy) -R, pos .z)) - r;",
"}",
"",
"float",
"distfunc (vec3 pos)",
"{",
"\tfloat sin_a = sin (time);",
"\tfloat cos_a = cos (time);",
"",
"\tvec3 rotpos = mat3 (",
"\t\tvec3 (cos(time * 1.63), 0, -sin (time * 1.63)),",
"\t\tvec3 (0.0, 1.0, 0.0),",
"\t\tvec3 (sin (time * 1.63), 0, cos (time * 1.63))",
"\t) * mat3 (",
"\t\tvec3 (cos( time * 1.2), -sin (time * 1.2), 0),",
"\t\tvec3 (sin (time * 1.2), cos( time * 1.2), 0),",
"\t\tvec3 (0.0, 0.0, 1.0)",
"\t) * (pos - vec3 (sin_a, cos_a, -4.0));",
"",
"\treturn mix (",
"\t\tcubefield (pos),",
"\t\ttorus (rotpos, 0.5, 1.0),",
"\t\t(sin (time / 2.0) + 1.5) / 2.5",
"\t);",
"}",
"",
"void",
"main ()",
"{",
"\tvec2 size = vec2 (x3d_Viewport [2], x3d_Viewport [3]);",
"",
"\tfloat x = (2.0 * gl_FragCoord .x - size .x) / max (size .x, size .y);",
"\tfloat y = (2.0 * gl_FragCoord .y - size .y) / max (size .x, size .y);",
"",
"\tvec3 ray_dir  = normalize (vec3 (x, y, -1.0 /*+sqrt(x*x+y*y)*/));",
"\tvec3 ray_orig = vec3 (0.0, 0.0, 0.0);",
"",
"\tfloat offs = 0.0;",
"\tfloat i    = 0.0;",
"",
"\tfor (float j = 0.0; j < 64.0; j++)",
"\t{",
"\t\tfloat dist = distfunc (ray_orig + ray_dir * offs);",
"",
"\t\toffs += dist;",
"\t\ti     = j;",
"",
"\t\tif (abs (dist) < 0.00001)",
"\t\t\tbreak;",
"\t\telse if (offs > 100.0)",
"\t\t\tbreak;",
"\t}",
"",
"\tfloat c = i / 64.0;",
"",
"\tgl_FragColor = vec4 (c * c * c, c * c, c, 1.0);",
"}",
"",
""
                                              ]
                                            }
                                          }
                                        ],
                                        "field": [
                                          {
                                            "@accessType": "inputOutput",
                                            "@type": "SFFloat",
                                            "@name": "time",
                                            "@value": 7152.246
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "-geometry": { "Rectangle2D":
                                {
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Timer",
            "@fromField": "fraction_changed",
            "@toNode": "Interpolator",
            "@toField": "set_fraction"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Interpolator",
            "@fromField": "value_changed",
            "@toNode": "ComposedShader",
            "@toField": "set_time"
          }
        }
      ]
    }
  }
}
