<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Geometry2D' level='2'/>
    <component name='Layering' level='1'/>
    <component name='Layout' level='2'/>
    <component name='Shaders' level='1'/>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Sun, 10 Dec 2017 16:14:16 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='x3d-tidy V1.0.97, https://www.npmjs.com/package/x3d-tidy'/>
    <meta name='modified' content='Tue, 17 Oct 2023 21:25:14 GMT'/>
    <meta name='titania-add-metadata' content='true'/>
  </head>
  <Scene>
    <WorldInfo/>
    <LayerSet
        order='0, 1'>
      <LayoutLayer>
        <Layout/>
        <TimeSensor DEF='Timer'
            cycleInterval='10000'
            loop='true'/>
        <ScalarInterpolator DEF='Interpolator'
            key='0, 1'
            keyValue='0, 10000'/>
        <Transform DEF='Rectangle2D'
            scale='0.5 0.5 0.5'>
          <Shape>
            <Appearance>
              <ComposedShader DEF='ComposedShader'
                  language='GLSL'>
                <field accessType='inputOutput' type='SFFloat' name='time' value='7914.457'/>
                <ShaderPart DEF='VertexShader'>
<![CDATA[data:x-shader/x-vertex,

precision highp float;
precision highp int;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

attribute vec4 x3d_Vertex;

void
main ()
{
	gl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * x3d_Vertex;
}
]]>
                </ShaderPart>
                <ShaderPart DEF='FragmentShader'
                    type='FRAGMENT'>
<![CDATA[data:x-shader/x-fragment,

precision highp float;
precision highp int;

uniform float time;

uniform ivec4 x3d_Viewport;

float
cubefield (vec3 pos)
{
	vec3  cellpos = pos - floor (pos);
	vec3  signvec = 2.0 * step (0.5, cellpos) - 1.0;
	float sign    = signvec .x * signvec .y * signvec .z;
	vec3  subpos  = abs (abs (cellpos - 0.5) - 0.25);

	return sign * (max (max (subpos .x, subpos .y), subpos .z) - 0.25);
}

float
sphere (vec3 pos, vec3 center, float r)
{
	return length (pos - center) - r;
}

float
torus (vec3 pos, float r, float R)
{
	return length (vec2 (length (pos .xy) -R, pos .z)) - r;
}

float
distfunc (vec3 pos)
{
	float sin_a = sin (time);
	float cos_a = cos (time);

	vec3 rotpos = mat3 (
		vec3 (cos(time * 1.63), 0, -sin (time * 1.63)),
		vec3 (0.0, 1.0, 0.0),
		vec3 (sin (time * 1.63), 0, cos (time * 1.63))
	) * mat3 (
		vec3 (cos( time * 1.2), -sin (time * 1.2), 0),
		vec3 (sin (time * 1.2), cos( time * 1.2), 0),
		vec3 (0.0, 0.0, 1.0)
	) * (pos - vec3 (sin_a, cos_a, -4.0));

	return mix (
		cubefield (pos),
		torus (rotpos, 0.5, 1.0),
		(sin (time / 2.0) + 1.5) / 2.5
	);
}

void
main ()
{
	vec2 size = vec2 (x3d_Viewport [2], x3d_Viewport [3]);

	float x = (2.0 * gl_FragCoord .x - size .x) / max (size .x, size .y);
	float y = (2.0 * gl_FragCoord .y - size .y) / max (size .x, size .y);

	vec3 ray_dir  = normalize (vec3 (x, y, -1.0 /*+sqrt(x*x+y*y)*/));
	vec3 ray_orig = vec3 (0.0, 0.0, 0.0);

	float offs = 0.0;
	float i    = 0.0;

	for (float j = 0.0; j < 64.0; j++)
	{
		float dist = distfunc (ray_orig + ray_dir * offs);

		offs += dist;
		i     = j;

		if (abs (dist) < 0.00001)
			break;
		else if (offs > 100.0)
			break;
	}

	float c = i / 64.0;

	gl_FragColor = vec4 (c * c * c, c * c, c, 1.0);
}

]]>
                </ShaderPart>
              </ComposedShader>
            </Appearance>
            <Rectangle2D/>
          </Shape>
        </Transform>
      </LayoutLayer>
    </LayerSet>
    <ROUTE fromNode='Timer' fromField='fraction_changed' toNode='Interpolator' toField='set_fraction'/>
    <ROUTE fromNode='Interpolator' fromField='value_changed' toNode='ComposedShader' toField='set_time'/>
  </Scene>
</X3D>
